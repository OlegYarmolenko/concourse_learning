###---Sources of variables---###
---
###---Notification anchors---###
teams-success: &teams-success
  on_success: 
      put: teams-notification
      params:
        text: |
          ((teams-notification.text.success))
        title: ((teams-notification.title.success))
        actionName: ((teams-notification.actionName))
        actionTarget: ((teams-notification.actionTarget))
teams-failure: &teams-failure
  on_failure:
    do:
    - put: teams-notification
      params:
        color: EA4300
        text: |
          ((teams-notification.text.failure))
        title: ((teams-notification.title.failure))
        actionName: ((teams-notification.actionName))
        actionTarget: ((teams-notification.actionTarget))
###---Credentials anchors---###
az-credentials-dev: &az-credentials-dev
  client_id: ((azure:dev-deploy.client_id))
  client_secret: ((azure:dev-deploy.client_secret))
  subscription_id: ((azure:dev-deploy.subscription_id))
  tenant_id: ((azure:dev-deploy.tenant_id))
az-credentials-qa: &az-credentials-qa
  client_id: ((azure:qa-deploy.client_id))
  client_secret: ((azure:qa-deploy.client_secret))
  subscription_id: ((azure:qa-deploy.subscription_id))
  tenant_id: ((azure:qa-deploy.tenant_id))
az-credentials-ppe: &az-credentials-ppe
  client_id: ((azure:ppe-deploy.client_id))
  client_secret: ((azure:ppe-deploy.client_secret))
  subscription_id: ((azure:ppe-deploy.subscription_id))
  tenant_id: ((azure:ppe-deploy.tenant_id))
az-credentials-prod: &az-credentials-prod
  client_id: ((azure:prod-deploy.client_id))
  client_secret: ((azure:prod-deploy.client_secret))
  subscription_id: ((azure:prod-deploy.subscription_id))
  tenant_id: ((azure:prod-deploy.tenant_id))
###---Terraform parameters---###
terraform-params: &terraform-params
  terraform-version: ((terraform.terraform-version))
  terraform-dir: ((terraform.script_dir))
###---BAMS for smoke tests---###
bams-general: &bams-general
  BAMS_PASSWORD: ((azure:bams-api.password))
  BAMS_URL: ((smoke-test.general.BAMS_URL))
  BAMS_USERNAME: ((azure:bams-api.username))
  
var_sources:
- name: vault
  type: vault
  config:
    url: https://vault.sdp.refinitiv.com
    client_token: ((auth-token))
    path_prefix: /concourse
- name: azure
  type: dummy
  config:
    vars:
        dev-deploy: ((vault:kv/azure-dev))
        qa-deploy: ((vault:kv/azure-qa))
        ppe-deploy: ((vault:kv/azure-ppe))
        prod-deploy: ((vault:kv/azure-prod))
        bams-api: ((vault:kv/bams))
        entitlements-dev: ((vault:kv/azure-dev/Entitlements))
        entitlements-qa: ((vault:kv/azure-qa/Entitlements))
        entitlements-ppe: ((vault:kv/azure-ppe/Entitlements))
        entitlements-prod: ((vault:kv/azure-prod/Entitlements))
        general-dev: ((vault:kv/azure-dev/General))
        general-qa: ((vault:kv/azure-qa/General))
        general-ppe: ((vault:kv/azure-ppe/General))
        general-prod: ((vault:kv/azure-prod/General))
        webhook: ((vault:kv/Entitlements-webhook))
###---Types of sources---###
resource_types:
- name: azure-blobstore
  type: docker-image
  source:
    repository: pcfabr/azure-blobstore-resource
- name: teams-notification
  type: docker-image
  source:
    repository: navicore/teams-notification-resource
    tag: latest
###---Resources(GIT)---###
resources:
  - name: function-app
    type: git
    icon: gitlab
    source:
      uri: ((repositories.source.repository))
      branch: ((repositories.source.branch))
      private_key: ((repositories.key))
  - name: function-app-dev
    type: git
    icon: gitlab
    source:
      uri: ((repositories.source-dev.repository))
      branch: ((repositories.source-dev.branch))
      private_key: ((repositories.key))
  # - name: function-app-dev-test
  #   type: git
  #   icon: gitlab
  #   source:
  #     uri: ((repositories.source-dev.repository))
  #     branch: bugfix/SNOWFL-1867_Fix_failed_tests
  #     private_key: ((repositories.key))
  - name: cicd
    type: git
    icon: gitlab
    source:
      uri: ((repositories.cicd.repository))
      branch: ((repositories.cicd.branch))
      private_key: ((repositories.key))
  - name: concourse
    type: git
    icon: gitlab
    source:
      uri: ((repositories.concourse-script.repository))
      branch: ((repositories.concourse-script.branch))
      private_key: ((repositories.key))
  - name: version
    type: semver
    source:
      driver: git
      uri: ((repositories.version.repository))
      branch: ((repositories.version.branch))
      file: ((repositories.version.file))
      private_key: ((repositories.key))
  - name: dev-version
    type: semver
    source:
      driver: git
      uri: ((repositories.version-dev.repository))
      branch: ((repositories.version-dev.branch))
      file: ((repositories.version-dev.file))
      private_key: ((repositories.key))
  - name: teams-notification
    type: teams-notification
    icon: microsoft-teams
    source:
      url: ((azure:webhook.teams))
###---Resources(Blobs)---###
###---DEV---###
  - name: azure-blobstore-dev-etsae
    type: azure-blobstore
    source:
      storage_account_name: ((vault:kv/dev-deploy-stacc.name))
      storage_account_key: ((vault:kv/dev-deploy-stacc.key))
      container: ((vault:kv/dev-deploy-stacc.almagest_container))
      regexp: ((artifact.regex.etsae))
  - name: azure-blobstore-dev-etspe
    type: azure-blobstore
    source:
      storage_account_name: ((vault:kv/dev-deploy-stacc.name))
      storage_account_key: ((vault:kv/dev-deploy-stacc.key))
      container: ((vault:kv/dev-deploy-stacc.almagest_container))
      regexp: ((artifact.regex.etspe))
  - name: azure-blobstore-dev-etscn
    type: azure-blobstore
    source:
      storage_account_name: ((vault:kv/dev-deploy-stacc.name))
      storage_account_key: ((vault:kv/dev-deploy-stacc.key))
      container: ((vault:kv/dev-deploy-stacc.almagest_container))
      regexp: ((artifact.regex.etscn))
  - name: azure-blobstore-dev-etsdrs
    type: azure-blobstore
    source:
      storage_account_name: ((vault:kv/dev-deploy-stacc.name))
      storage_account_key: ((vault:kv/dev-deploy-stacc.key))
      container: ((vault:kv/dev-deploy-stacc.almagest_container))
      regexp: ((artifact.regex.etsdrs))
  - name: azure-blobstore-dev-etsrr
    type: azure-blobstore
    source:
      storage_account_name: ((vault:kv/dev-deploy-stacc.name))
      storage_account_key: ((vault:kv/dev-deploy-stacc.key))
      container: ((vault:kv/dev-deploy-stacc.almagest_container))
      regexp: ((artifact.regex.etsrr))
###---QA---###
  - name: azure-blobstore-qa-etsae
    type: azure-blobstore
    source:
      storage_account_name: ((vault:kv/qa-deploy-stacc.name))
      storage_account_key: ((vault:kv/qa-deploy-stacc.key))
      container: ((vault:kv/qa-deploy-stacc.almagest_container))
      regexp: ((artifact.regex.etsae))
  - name: azure-blobstore-qa-etspe
    type: azure-blobstore
    source:
      storage_account_name: ((vault:kv/qa-deploy-stacc.name))
      storage_account_key: ((vault:kv/qa-deploy-stacc.key))
      container: ((vault:kv/qa-deploy-stacc.almagest_container))
      regexp: ((artifact.regex.etspe))
  - name: azure-blobstore-qa-etscn
    type: azure-blobstore
    source:
      storage_account_name: ((vault:kv/qa-deploy-stacc.name))
      storage_account_key: ((vault:kv/qa-deploy-stacc.key))
      container: ((vault:kv/qa-deploy-stacc.almagest_container))
      regexp: ((artifact.regex.etscn))
  - name: azure-blobstore-qa-etsdrs
    type: azure-blobstore
    source:
      storage_account_name: ((vault:kv/qa-deploy-stacc.name))
      storage_account_key: ((vault:kv/qa-deploy-stacc.key))
      container: ((vault:kv/qa-deploy-stacc.almagest_container))
      regexp: ((artifact.regex.etsdrs))
  - name: azure-blobstore-qa-etsrr
    type: azure-blobstore
    source:
      storage_account_name: ((vault:kv/qa-deploy-stacc.name))
      storage_account_key: ((vault:kv/qa-deploy-stacc.key))
      container: ((vault:kv/qa-deploy-stacc.almagest_container))
      regexp: ((artifact.regex.etsrr)) 
###---PPE---###
  - name: azure-blobstore-ppe-etsae
    type: azure-blobstore
    source:
      storage_account_name: ((vault:kv/ppe-deploy-stacc.name))
      storage_account_key: ((vault:kv/ppe-deploy-stacc.key))
      container: ((vault:kv/ppe-deploy-stacc.almagest_container))
      regexp: ((artifact.regex.etsae))
  - name: azure-blobstore-ppe-etspe
    type: azure-blobstore
    source:
      storage_account_name: ((vault:kv/ppe-deploy-stacc.name))
      storage_account_key: ((vault:kv/ppe-deploy-stacc.key))
      container: ((vault:kv/ppe-deploy-stacc.almagest_container))
      regexp: ((artifact.regex.etspe))
  - name: azure-blobstore-ppe-etscn
    type: azure-blobstore
    source:
      storage_account_name: ((vault:kv/ppe-deploy-stacc.name))
      storage_account_key: ((vault:kv/ppe-deploy-stacc.key))
      container: ((vault:kv/ppe-deploy-stacc.almagest_container))
      regexp: ((artifact.regex.etscn))
  - name: azure-blobstore-ppe-etsdrs
    type: azure-blobstore
    source:
      storage_account_name: ((vault:kv/ppe-deploy-stacc.name))
      storage_account_key: ((vault:kv/ppe-deploy-stacc.key))
      container: ((vault:kv/ppe-deploy-stacc.almagest_container))
      regexp: ((artifact.regex.etsdrs))
  - name: azure-blobstore-ppe-etsrr
    type: azure-blobstore
    source:
      storage_account_name: ((vault:kv/ppe-deploy-stacc.name))
      storage_account_key: ((vault:kv/ppe-deploy-stacc.key))
      container: ((vault:kv/ppe-deploy-stacc.almagest_container))
      regexp: ((artifact.regex.etsrr))
 ###---PPE-DR---###
  - name: azure-blobstore-ppe-etsae-dr
    type: azure-blobstore
    source:
      storage_account_name: ((vault:kv/dr-ppe-deploy-stacc.name))
      storage_account_key: ((vault:kv/dr-ppe-deploy-stacc.key))
      container: ((vault:kv/dr-ppe-deploy-stacc.almagest_container))
      regexp: ((artifact.regex.etsae))
  - name: azure-blobstore-ppe-etspe-dr
    type: azure-blobstore
    source:
      storage_account_name: ((vault:kv/dr-ppe-deploy-stacc.name))
      storage_account_key: ((vault:kv/dr-ppe-deploy-stacc.key))
      container: ((vault:kv/dr-ppe-deploy-stacc.almagest_container))
      regexp: ((artifact.regex.etspe))
  - name: azure-blobstore-ppe-etscn-dr
    type: azure-blobstore
    source:
      storage_account_name: ((vault:kv/dr-ppe-deploy-stacc.name))
      storage_account_key: ((vault:kv/dr-ppe-deploy-stacc.key))
      container: ((vault:kv/dr-ppe-deploy-stacc.almagest_container))
      regexp: ((artifact.regex.etscn))
  - name: azure-blobstore-ppe-etsdrs-dr
    type: azure-blobstore
    source:
      storage_account_name: ((vault:kv/dr-ppe-deploy-stacc.name))
      storage_account_key: ((vault:kv/dr-ppe-deploy-stacc.key))
      container: ((vault:kv/dr-ppe-deploy-stacc.almagest_container))
      regexp: ((artifact.regex.etsdrs))
  - name: azure-blobstore-ppe-etsrr-dr
    type: azure-blobstore
    source:
      storage_account_name: ((vault:kv/dr-ppe-deploy-stacc.name))
      storage_account_key: ((vault:kv/dr-ppe-deploy-stacc.key))
      container: ((vault:kv/dr-ppe-deploy-stacc.almagest_container))
      regexp: ((artifact.regex.etsrr))
 ###---PROD---###
  - name: azure-blobstore-prod-etsae
    type: azure-blobstore
    source:
      storage_account_name: ((vault:kv/prod-deploy-stacc.name))
      storage_account_key: ((vault:kv/prod-deploy-stacc.key))
      container: ((vault:kv/prod-deploy-stacc.almagest_container))
      regexp: ((artifact.regex.etsae))
  - name: azure-blobstore-prod-etspe
    type: azure-blobstore
    source:
      storage_account_name: ((vault:kv/prod-deploy-stacc.name))
      storage_account_key: ((vault:kv/prod-deploy-stacc.key))
      container: ((vault:kv/prod-deploy-stacc.almagest_container))
      regexp: ((artifact.regex.etspe))
  - name: azure-blobstore-prod-etscn
    type: azure-blobstore
    source:
      storage_account_name: ((vault:kv/prod-deploy-stacc.name))
      storage_account_key: ((vault:kv/prod-deploy-stacc.key))
      container: ((vault:kv/prod-deploy-stacc.almagest_container))
      regexp: ((artifact.regex.etscn))
  - name: azure-blobstore-prod-etsdrs
    type: azure-blobstore
    source:
      storage_account_name: ((vault:kv/prod-deploy-stacc.name))
      storage_account_key: ((vault:kv/prod-deploy-stacc.key))
      container: ((vault:kv/prod-deploy-stacc.almagest_container))
      regexp: ((artifact.regex.etsdrs))
  - name: azure-blobstore-prod-etsrr
    type: azure-blobstore
    source:
      storage_account_name: ((vault:kv/prod-deploy-stacc.name))
      storage_account_key: ((vault:kv/prod-deploy-stacc.key))
      container: ((vault:kv/prod-deploy-stacc.almagest_container))
      regexp: ((artifact.regex.etsrr))
 ###---PROD-DR---###
  - name: azure-blobstore-prod-etsae-dr
    type: azure-blobstore
    source:
      storage_account_name: ((vault:kv/dr-prod-deploy-stacc.name))
      storage_account_key: ((vault:kv/dr-prod-deploy-stacc.key))
      container: ((vault:kv/dr-prod-deploy-stacc.almagest_container))
      regexp: ((artifact.regex.etsae))
  - name: azure-blobstore-prod-etspe-dr
    type: azure-blobstore
    source:
      storage_account_name: ((vault:kv/dr-prod-deploy-stacc.name))
      storage_account_key: ((vault:kv/dr-prod-deploy-stacc.key))
      container: ((vault:kv/dr-prod-deploy-stacc.almagest_container))
      regexp: ((artifact.regex.etspe))
  - name: azure-blobstore-prod-etscn-dr
    type: azure-blobstore
    source:
      storage_account_name: ((vault:kv/dr-prod-deploy-stacc.name))
      storage_account_key: ((vault:kv/dr-prod-deploy-stacc.key))
      container: ((vault:kv/dr-prod-deploy-stacc.almagest_container))
      regexp: ((artifact.regex.etscn))
  - name: azure-blobstore-prod-etsdrs-dr
    type: azure-blobstore
    source:
      storage_account_name: ((vault:kv/dr-prod-deploy-stacc.name))
      storage_account_key: ((vault:kv/dr-prod-deploy-stacc.key))
      container: ((vault:kv/dr-prod-deploy-stacc.almagest_container))
      regexp: ((artifact.regex.etsdrs))
  - name: azure-blobstore-prod-etsrr-dr
    type: azure-blobstore
    source:
      storage_account_name: ((vault:kv/dr-prod-deploy-stacc.name))
      storage_account_key: ((vault:kv/dr-prod-deploy-stacc.key))
      container: ((vault:kv/dr-prod-deploy-stacc.almagest_container))
      regexp: ((artifact.regex.etsrr))
###---Jobs---###
jobs:
###---DEV---###
- name: dev-sonar-tests
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: function-app-dev
      trigger: true
    - get: dev-version
      params: {bump: patch}
    - get: concourse
  - task: sonarscanner
    input_mapping:
      code-root: function-app-dev
      version: dev-version
    output_mapping:
      code-root: function-app-dev
      version: dev-version
    params:
      CS_PROJECT_PATH: ((sonar-scan.cs_project_path))
      BUILD_CONFIGURATION: ((sonar-scan.build_configuration))
      SRC: ((sonar-scan.src))
      SLN_PATH: ((sonar-scan.sln_path))
      TEST_PATH: ((sonar-scan.test_path))
    file: concourse/sonar-scanner/sonarq-tests.yml
  - put: dev-version
    params: { file: dev-version/version }
  - put: function-app-dev
    params:
      only_tag: true
      tag_prefix: v
      tag: dev-version/version
      repository: function-app-dev
      force: true
- name: dev-build-publish-etsae
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: function-app-dev
      passed:
      - dev-sonar-tests
    - get: dev-version
      passed:
      - dev-sonar-tests
      trigger: true
    - get: concourse
  - task: build-acceptentitlements
    input_mapping:
      code-root: function-app-dev
      version: dev-version
    output_mapping:
      code-root: function-app-dev
      version: dev-version
    params:
      COMPONENT_NAME: ((component.name.etsae))
      CS_PROJECT_PATH: ((component.cs_project_path.etsae))
      BUILD_CONFIGURATION: ((component.build_configuration))
      SRC: ((component.src.etsae))
    file: concourse/build/dotnet-build-almagest-task.yml
  - in_parallel:
    - put: azure-blobstore-dev-etsae
      params:
        file: packaged-code/((artifact.name.etsae))   
- name: dev-build-publish-etspe
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: function-app-dev
      passed:
      - dev-sonar-tests
    - get: dev-version
      passed:
      - dev-sonar-tests
      trigger: true
    - get: concourse

  - task: build-applyentitlements
    input_mapping:
      code-root: function-app-dev
      version: dev-version
    output_mapping:
      code-root: function-app-dev
      version: dev-version
    params:
      COMPONENT_NAME: ((component.name.etspe))
      CS_PROJECT_PATH: ((component.cs_project_path.etspe))
      BUILD_CONFIGURATION: ((component.build_configuration))
      SRC: ((component.src.etspe))
    file: concourse/build/dotnet-build-almagest-task.yml
  - in_parallel:
    - put: azure-blobstore-dev-etspe
      params:
        file: packaged-code/((artifact.name.etspe))  
- name: dev-build-publish-etscn
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: function-app-dev
      passed:
      - dev-sonar-tests
    - get: dev-version
      passed:
      - dev-sonar-tests
      trigger: true
    - get: concourse

  - task: build-compassnotifier
    input_mapping:
      code-root: function-app-dev
      version: dev-version
    output_mapping:
      code-root: function-app-dev
      version: dev-version
    params:
      COMPONENT_NAME: ((component.name.etscn))
      CS_PROJECT_PATH: ((component.cs_project_path.etscn))
      BUILD_CONFIGURATION: ((component.build_configuration))
      SRC: ((component.src.etscn))
    file: concourse/build/dotnet-build-almagest-task.yml
  - in_parallel:
    - put: azure-blobstore-dev-etscn
      params:
        file: packaged-code/((artifact.name.etscn))   
- name: dev-build-publish-etsrr
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: function-app-dev
      passed:
      - dev-sonar-tests
    - get: dev-version
      passed:
      - dev-sonar-tests
      trigger: true
    - get: concourse

  - task: build-replicarefresh
    input_mapping:
      code-root: function-app-dev
      version: dev-version
    output_mapping:
      code-root: function-app-dev
      version: dev-version
    params:
      COMPONENT_NAME: ((component.name.etsrr))
      CS_PROJECT_PATH: ((component.cs_project_path.etsrr))
      BUILD_CONFIGURATION: ((component.build_configuration))
      SRC: ((component.src.etsrr))
    file: concourse/build/dotnet-build-almagest-task.yml
  - in_parallel:
    - put: azure-blobstore-dev-etsrr
      params:
        file: packaged-code/((artifact.name.etsrr))  
- name: dev-build-publish-etsdrs
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: function-app-dev
      passed:
      - dev-sonar-tests
    - get: dev-version
      passed:
      - dev-sonar-tests
      trigger: true
    - get: concourse

  - task: build-deadrequestssearcher
    input_mapping:
      code-root: function-app-dev
      version: dev-version
    output_mapping:
      code-root: function-app-dev
      version: dev-version
    params:
      COMPONENT_NAME: ((component.name.etsdrs))
      CS_PROJECT_PATH: ((component.cs_project_path.etsdrs))
      BUILD_CONFIGURATION: ((component.build_configuration))
      SRC: ((component.src.etsdrs))
    file: concourse/build/dotnet-build-almagest-task.yml
  - in_parallel:
    - put: azure-blobstore-dev-etsdrs
      params:
        file: packaged-code/((artifact.name.etsdrs))
- name: terraform-deploy-dev
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: cicd
    - get: concourse
    - get: dev-version
      passed:
      - dev-build-publish-etsae
      - dev-build-publish-etspe
      - dev-build-publish-etscn
      - dev-build-publish-etsrr
      - dev-build-publish-etsdrs
      trigger: true
  - task: run-terraform
    input_mapping:
      code-root: cicd
      version: dev-version
    vars:
      <<: *az-credentials-dev
      <<: *terraform-params
      terraform-commands: |
        terraform init -reconfigure -backend-config=../../../environments/dev/((terraform.env_folder))/terraform.backendconfig
        terraform plan -var-file=../../../environments/dev/((terraform.env_folder))/terraform.tfvars \
          -var source_zip_file_name_etsae=((component.name.etsae))-$VERSION.zip \
          -var source_zip_file_name_etspe=((component.name.etspe))-$VERSION.zip \
          -var source_zip_file_name_etscn=((component.name.etscn))-$VERSION.zip \
          -var source_zip_file_name_etsrr=((component.name.etsrr))-$VERSION.zip \
          -var source_zip_file_name_etsdrs=((component.name.etsdrs))-$VERSION.zip \
          -var ZipArtifactVersion=$VERSION \
          -var secret_name_snowflk_login='((azure:entitlements-dev.SnowflakeEntitlementServiceAccountLogin))' \
          -var secret_name_snowflk_pass='((azure:entitlements-dev.SnowflakeEntitlementServiceAccountPswd))' \
          -var secret_name_snowflk_replication_login='((azure:entitlements-dev.SnowflakeReplicationAccountLogin))' \
          -var secret_name_snowflk_replication_pass='((azure:entitlements-dev.SnowflakeReplicationAccountPswd))' \
          -var secret_name_snowflk_connstring='((azure:entitlements-dev.SF-ConnectionString-azure-east-us-2))' \
          -var secret_name_snowflk_connstringslot='((azure:entitlements-dev.((slot-settings.snowflake.string))-azure-east-us-2))' \
          -var secret_name_snowflk_replicanodes='((azure:entitlements-dev.SnowflakeReplicaNodes))' \
          -var secret_name_compass_key='((azure:general-dev.cam-subscription-pk))' \
          -var secret_name_snowflk_connstring_aws='((azure:entitlements-dev.SF-ConnectionString-aws-us-east-1))' \
          -var secret_name_snowflk_connstringslot_aws='((azure:entitlements-dev.SF-ConnectionString-Slot-aws-us-east-1))' \
          -var QacFunctionAppId='((azure:entitlements-dev.QacFunctionAppId))'  --out=plan.tfplan
        terraform apply  --parallelism=1 plan.tfplan
    file: concourse/terraform/run-terraform-task.yaml
- name: deploy-sqlscripts-dev
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: dev-version
      passed:
      - terraform-deploy-dev
      trigger: true
    - get: function-app-dev
    - get: cicd
    - get: concourse
  - in_parallel:
    - task: execute-python-dev
      input_mapping:
        function-app: function-app-dev
        cicd: cicd
        version: dev-version
      vars:
        snowflakeConnectionString: ((azure:entitlements-dev.SF-ConnectionString-azure-east-us-2))
        sqlScriptsFolderOrFilesList: "../../../function-app/SnowflakeScripts/Apply"
        snowflakeUser: ((azure:general-dev.SnowflakeServiceAccountLoginId))
        snowflakePassword: ((azure:general-dev.SnowflakeServiceAccountPswd))
        artifactVersion: ""
        exec_path: ((sql-scripts.exec_path))
        isSlot: "false"
      file: cicd/scripts/storproc-update/deploy/snowflakeproc.yml
    - task: execute-python-dev-slot
      input_mapping:
        function-app: function-app-dev
        cicd: cicd
        version: dev-version
      vars:
        snowflakeConnectionString: ((azure:entitlements-dev.SF-ConnectionString-Slot-azure-east-us-2))
        sqlScriptsFolderOrFilesList: "../../../function-app/SnowflakeScripts/Apply"
        snowflakeUser: ((azure:general-dev.SnowflakeServiceAccountLoginId))
        snowflakePassword: ((azure:general-dev.SnowflakeServiceAccountPswd))
        artifactVersion: ""
        exec_path: ((sql-scripts.exec_path))
        isSlot: "true"
      file: cicd/scripts/storproc-update/deploy/snowflakeproc.yml
  - task: refresh-function-etsrr
    input_mapping: 
      concourse: concouse
    vars:
      functionkey: ((azure:entitlements-dev.etsrr_key))
      functionURL: ((azure:entitlements-dev.etsrr_refresh_url))
      <<: *az-credentials-dev
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp function keys list -g ((az-cli.rg-name)) -n ((az-cli.dev.etsrr)) --function-name RefreshTrigger | grep -o '"default": "[^"]*' | grep -o '[^"]*$' > key.txt
        az rest --uri "https://a250315-dds-dev-eus2-func-etsrr.azurewebsites.net/api/replicas" --method post --headers x-functions-key=$(cat key.txt)
    file: concourse/azure-cli/azure-cli-task.yml
  - task: azcli-restart-function-apps
    input_mapping:
      code-root: cicd
    vars:
      <<: *az-credentials-dev
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp restart --name ((az-cli.dev.etspe)) --slot dev --resource-group ((az-cli.rg-name))
        az functionapp restart --name ((az-cli.dev.etscn)) --slot dev --resource-group ((az-cli.rg-name))
        
    file: concourse/azure-cli/azure-cli-task.yml
- name: smoke-test-dev
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: dev-version
      passed:
      - deploy-sqlscripts-dev
      - slot-settings-dev
      trigger: true
    - get: concourse
    - get: function-app-dev
  - task: smoke-test
    input_mapping:
      code-root: function-app-dev
      version: dev-version
    vars:
      <<: *az-credentials-dev
      <<: *bams-general
      Azure__Functions__AcceptEntitlementSecretName: ((smoke-test.general.Azure__Functions__AcceptEntitlementSecretName))
      Azure__Blobs__EntitlementStorageSecretName: ((smoke-test.general.Azure__Blobs__EntitlementStorageSecretName))
      Azure__Functions__RefreshReplicaSecretName: ((smoke-test.general.Azure_Functions_RefreshReplicaSecretName))
      Azure__KeyVaults__KeyVault: ((smoke-test.dev.Azure__KeyVaults__KeyVault))
      Azure__KeyVaults__SnowflakePasswordVault: ((smoke-test.dev.Azure__KeyVaults__SnowflakePasswordVault))
      Snowflake__Internal__User: ((azure:general-dev.SnowflakeServiceAccountLoginId))
      Snowflake__Internal__Password: ((azure:general-dev.SnowflakeServiceAccountPswd))
      Snowflake__Internal__Schema: ((smoke-test.general.Snowflake__Internal__Schema))
      Application__CustomerIdName: ((smoke-test.dev.Application__CustomerIdName))
      EnvironmentName: ((azure:general-dev.EnvironmentName))
      ScriptsVersion: ""
      TestRailConnectionString: ((azure:general-dev.TestRailConnectionString))
      SnowflakeInternal: ((azure:entitlements-dev.SF-ConnectionString-azure-east-us-2))
      SnowflakeExternal: ((azure:entitlements-dev.Snowflake_External_Primary_ConnectionString))
      CosmosDbName: dds-logging
      UseTestDb: true
      Application__Timeout: "00:10:00"
      Application__Interval: "00:00:05"
    file: concourse/smoke-tests/smoke-test-dev.yml
- name: smoke-test-dev-replica
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: dev-version
      passed:
      - smoke-test-dev
      trigger: true
    - get: concourse
    - get: function-app-dev
  - task: smoke-test
    input_mapping:
      code-root: function-app-dev
      version: dev-version
    vars:
      <<: *az-credentials-dev
      <<: *bams-general
      Azure__Functions__AcceptEntitlementSecretName: ((smoke-test.general.Azure__Functions__AcceptEntitlementSecretName))
      Azure__Blobs__EntitlementStorageSecretName: ((smoke-test.general.Azure__Blobs__EntitlementStorageSecretName))
      Azure__Functions__RefreshReplicaSecretName: ((smoke-test.general.Azure_Functions_RefreshReplicaSecretName))
      Azure__KeyVaults__KeyVault: ((smoke-test.dev.Azure__KeyVaults__KeyVault))
      Azure__KeyVaults__SnowflakePasswordVault: ((smoke-test.dev.Azure__KeyVaults__SnowflakePasswordVault))
      Snowflake__Internal__User: ((azure:general-dev.SnowflakeServiceAccountLoginId))
      Snowflake__Internal__Password: ((azure:general-dev.SnowflakeServiceAccountPswd))
      Snowflake__Internal__Schema: ((smoke-test.general.Snowflake__Internal__Schema))
      Application__CustomerIdName: ((smoke-test.dev.Application__CustomerIdName))
      EnvironmentName: ((azure:general-dev.EnvironmentName))
      ScriptsVersion: ""
      TestRailConnectionString: ((azure:general-dev.TestRailConnectionString))
      SnowflakeInternal: ((azure:entitlements-dev.SF-ConnectionString-aws-us-east-1))
      SnowflakeExternal: ((azure:entitlements-dev.Snowflake_External_DR_ConnectionString))
      UseTestDb: false
      Application__Timeout: "00:10:00"
      Application__Interval: "00:00:05"
    file: concourse/smoke-tests/smoke-test-dr-dev.yml
- name: slot-settings-dev
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: concourse
    - get: dev-version
      passed:
      - terraform-deploy-dev
      trigger: true
  - task: azcli-slot-sticky-settings-dev
    input_mapping:
      code-root: cicd
    vars:
      <<: *az-credentials-dev
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp config appsettings set --name ((az-cli.dev.etsae)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "EntitlementsContainerName=((slot-settings.etscontainer))"
        az functionapp config appsettings set --name ((az-cli.dev.etspe)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "EntitlementsContainerName=((slot-settings.etscontainer))"

        az functionapp config appsettings set --name ((az-cli.dev.etsae)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "FailedEntitlementsContainerName=((slot-settings.failetscontainer))"
        az functionapp config appsettings set --name ((az-cli.dev.etspe)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "FailedEntitlementsContainerName=((slot-settings.failetscontainer))"

        az functionapp config appsettings set --name ((az-cli.dev.etsae)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "AppId=((slot-settings.appid.etsae))"
        az functionapp config appsettings set --name ((az-cli.dev.etspe)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "AppId=((slot-settings.appid.etspe))"
        az functionapp config appsettings set --name ((az-cli.dev.etscn)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "AppId=((slot-settings.appid.etscn))"
        az functionapp config appsettings set --name ((az-cli.dev.etsrr)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "AppId=((slot-settings.appid.etsrr))"
        az functionapp config appsettings set --name ((az-cli.dev.etsdrs)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "AppId=((slot-settings.appid.etsdrs))"

        az functionapp config appsettings set --name ((az-cli.dev.etsae)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "((slot-settings.hubname.setting))=((slot-settings.hubname.etsae))"
        az functionapp config appsettings set --name ((az-cli.dev.etspe)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "((slot-settings.hubname.setting))=((slot-settings.hubname.etspe))"
        az functionapp config appsettings set --name ((az-cli.dev.etsrr)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "((slot-settings.hubname.setting))=((slot-settings.hubname.etsrr))"
        az functionapp config appsettings set --name ((az-cli.dev.etsdrs)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "((slot-settings.hubname.setting))=((slot-settings.hubname.etsdrs))"
        az functionapp config appsettings set --name ((az-cli.dev.etscn)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "((slot-settings.hubname.setting))=((slot-settings.hubname.etscn))"

        az functionapp config appsettings set --name ((az-cli.dev.etsae)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "CosmosDBName=((slot-settings.cosmos.dbname))"
        az functionapp config appsettings set --name ((az-cli.dev.etspe)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "CosmosDBName=((slot-settings.cosmos.dbname))"
        az functionapp config appsettings set --name ((az-cli.dev.etscn)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "CosmosDBName=((slot-settings.cosmos.dbname))"
        az functionapp config appsettings set --name ((az-cli.dev.etsrr)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "CosmosDBName=((slot-settings.cosmos.dbname))"
        az functionapp config appsettings set --name ((az-cli.dev.etsdrs)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "CosmosDBName=((slot-settings.cosmos.dbname))"

        az functionapp config appsettings set --name ((az-cli.dev.etspe)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "((slot-settings.snowflake.setting))=((slot-settings.snowflake.string))"

        az functionapp config appsettings set --name ((az-cli.dev.etsae)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "EntitlementsQueue=((slot-settings.entitlementsqueue))"
        az functionapp config appsettings set --name ((az-cli.dev.etspe)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "EntitlementsQueue=((slot-settings.entitlementsqueue))"
        az functionapp config appsettings set --name ((az-cli.dev.etsdrs)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "EntitlementsQueue=((slot-settings.entitlementsqueue))"

        az functionapp config appsettings set --name ((az-cli.dev.etsae)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "RemovalContainerName=((slot-settings.rmvcontainer))"
        az functionapp config appsettings set --name ((az-cli.dev.etsae)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "FailedRemovalContainerName=((slot-settings.flrmvcontainer))"

        az functionapp config appsettings set --name ((az-cli.dev.etspe)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "RemovalContainerName=((slot-settings.rmvcontainer))"
        az functionapp config appsettings set --name ((az-cli.dev.etspe)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "FailedRemovalContainerName=((slot-settings.flrmvcontainer))"

        az functionapp config appsettings set --name ((az-cli.dev.etscn)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "IsSlotEnvironment=((slot-settings.isslotenv))"

    file: concourse/azure-cli/azure-cli-task-bams.yml
- name: azcli-slot-swap-dev-etsae
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - get: concourse
  - get: dev-version
    passed:
    - smoke-test-dev-replica
    trigger: true

  - task: azcli-slot-swap-etsae
    input_mapping:
      code-root: cicd
    vars:
      <<: *az-credentials-dev
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp deployment slot swap -g ((az-cli.rg-name)) -n ((az-cli.dev.etsae)) --slot dev --target-slot production
    file: concourse/azure-cli/azure-cli-task-bams.yml
- name: azcli-slot-swap-dev-etspe
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - get: concourse
  - get: dev-version
    passed:
    - smoke-test-dev-replica
    trigger: true

  - task: azcli-slot-swap-etspe
    input_mapping:
      code-root: cicd
    vars:
      <<: *az-credentials-dev
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp deployment slot swap -g ((az-cli.rg-name)) -n ((az-cli.dev.etspe)) --slot dev --target-slot production
    file: concourse/azure-cli/azure-cli-task-bams.yml
- name: azcli-slot-swap-dev-etscn
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - get: concourse
  - get: dev-version
    passed:
    - smoke-test-dev-replica
    trigger: true

  - task: azcli-slot-swap-etscn
    input_mapping:
      code-root: cicd
    vars:
      <<: *az-credentials-dev
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp deployment slot swap -g ((az-cli.rg-name)) -n ((az-cli.dev.etscn)) --slot dev --target-slot production
    file: concourse/azure-cli/azure-cli-task-bams.yml
- name: azcli-slot-swap-dev-etsrr
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - get: concourse
  - get: dev-version
    passed:
    - smoke-test-dev-replica
    trigger: true

  - task: azcli-slot-swap-etsrr
    input_mapping:
      code-root: cicd
    vars:
      <<: *az-credentials-dev
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp deployment slot swap -g ((az-cli.rg-name)) -n ((az-cli.dev.etsrr)) --slot dev --target-slot production
    file: concourse/azure-cli/azure-cli-task-bams.yml
- name: azcli-slot-swap-dev-etsdrs
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - get: concourse
  - get: dev-version
    passed:
    - smoke-test-dev-replica
    trigger: true

  - task: azcli-slot-swap-etsdrs
    input_mapping:
      code-root: cicd
    vars:
      <<: *az-credentials-dev
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp deployment slot swap -g ((az-cli.rg-name)) -n ((az-cli.dev.etsdrs)) --slot dev --target-slot production
    file: concourse/azure-cli/azure-cli-task-bams.yml

###--MASTER-BUILD---###
- name: master-sonar-tests
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: function-app
      #trigger: true
    - get: version
      params: {bump: patch}
    - get: concourse
  - task: sonarscanner
    input_mapping:
      code-root: function-app
    output_mapping:
      code-root: function-app
    params:
      CS_PROJECT_PATH: ((sonar-scan.cs_project_path))
      BUILD_CONFIGURATION: ((sonar-scan.build_configuration))
      SRC: ((sonar-scan.src))
      SLN_PATH: ((sonar-scan.sln_path))
      TEST_PATH: ((sonar-scan.test_path))
    file: concourse/sonar-scanner/sonarq-tests.yml
  - put: version
    params: { file: version/version }
  - put: function-app
    params:
      only_tag: true
      tag_prefix: v
      tag: version/version
      repository: function-app
      force: true
- name: master-build-publish-etsae
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: function-app
      passed:
      - master-sonar-tests
      trigger: true
    - get: version
      passed:
      - master-sonar-tests
      trigger: true
    - get: concourse

  - task: build-acceptentitlements
    input_mapping:
      code-root: function-app
    output_mapping:
      code-root: function-app
    params:
      COMPONENT_NAME: ((component.name.etsae))
      CS_PROJECT_PATH: ((component.cs_project_path.etsae))
      BUILD_CONFIGURATION: ((component.build_configuration))
      SRC: ((component.src.etsae))
    file: concourse/build/dotnet-build-almagest-task.yml
  - in_parallel:
    - put: azure-blobstore-qa-etsae
      params:
        file: packaged-code/((artifact.name.etsae))
    - put: azure-blobstore-ppe-etsae
      params:
        file: packaged-code/((artifact.name.etsae))
    - put: azure-blobstore-ppe-etsae-dr
      params:
        file: packaged-code/((artifact.name.etsae))
    - put: azure-blobstore-prod-etsae
      params:
        file: packaged-code/((artifact.name.etsae))
    - put: azure-blobstore-prod-etsae-dr
      params:
        file: packaged-code/((artifact.name.etsae))    
- name: master-build-publish-etspe
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: function-app
      passed:
      - master-sonar-tests
      trigger: true
    - get: version
      passed:
      - master-sonar-tests
      trigger: true
    - get: concourse

  - task: build-applyentitlements
    input_mapping:
      code-root: function-app
    output_mapping:
      code-root: function-app
    params:
      COMPONENT_NAME: ((component.name.etspe))
      CS_PROJECT_PATH: ((component.cs_project_path.etspe))
      BUILD_CONFIGURATION: ((component.build_configuration))
      SRC: ((component.src.etspe))
    file: concourse/build/dotnet-build-almagest-task.yml
  - in_parallel:
    - put: azure-blobstore-qa-etspe
      params:
        file: packaged-code/((artifact.name.etspe))
    - put: azure-blobstore-ppe-etspe
      params:
        file: packaged-code/((artifact.name.etspe))
    - put: azure-blobstore-ppe-etspe-dr
      params:
        file: packaged-code/((artifact.name.etspe))
    - put: azure-blobstore-prod-etspe
      params:
        file: packaged-code/((artifact.name.etspe))
    - put: azure-blobstore-prod-etspe-dr
      params:
        file: packaged-code/((artifact.name.etspe))    
- name: master-build-publish-etscn
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: function-app
      passed:
      - master-sonar-tests
      trigger: true
    - get: version
      passed:
      - master-sonar-tests
      trigger: true
    - get: concourse

  - task: build-compassnotifier
    input_mapping:
      code-root: function-app
    output_mapping:
      code-root: function-app
    params:
      COMPONENT_NAME: ((component.name.etscn))
      CS_PROJECT_PATH: ((component.cs_project_path.etscn))
      BUILD_CONFIGURATION: ((component.build_configuration))
      SRC: ((component.src.etscn))
    file: concourse/build/dotnet-build-almagest-task.yml
  - in_parallel:
    - put: azure-blobstore-qa-etscn
      params:
        file: packaged-code/((artifact.name.etscn))
    - put: azure-blobstore-ppe-etscn
      params:
        file: packaged-code/((artifact.name.etscn))
    - put: azure-blobstore-ppe-etscn-dr
      params:
        file: packaged-code/((artifact.name.etscn))
    - put: azure-blobstore-prod-etscn
      params:
        file: packaged-code/((artifact.name.etscn))
    - put: azure-blobstore-prod-etscn-dr
      params:
        file: packaged-code/((artifact.name.etscn))    
- name: master-build-publish-etsrr
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: function-app
      passed:
      - master-sonar-tests
      trigger: true
    - get: version
      passed:
      - master-sonar-tests
      trigger: true
    - get: concourse

  - task: build-replicarefresh
    input_mapping:
      code-root: function-app
    output_mapping:
      code-root: function-app
    params:
      COMPONENT_NAME: ((component.name.etsrr))
      CS_PROJECT_PATH: ((component.cs_project_path.etsrr))
      BUILD_CONFIGURATION: ((component.build_configuration))
      SRC: ((component.src.etsrr))
    file: concourse/build/dotnet-build-almagest-task.yml
  - in_parallel:
    - put: azure-blobstore-qa-etsrr
      params:
        file: packaged-code/((artifact.name.etsrr))
    - put: azure-blobstore-ppe-etsrr
      params:
        file: packaged-code/((artifact.name.etsrr))
    - put: azure-blobstore-ppe-etsrr-dr
      params:
        file: packaged-code/((artifact.name.etsrr))
    - put: azure-blobstore-prod-etsrr
      params:
        file: packaged-code/((artifact.name.etsrr))
    - put: azure-blobstore-prod-etsrr-dr
      params:
        file: packaged-code/((artifact.name.etsrr))    
- name: master-build-publish-etsdrs
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: function-app
      passed:
      - master-sonar-tests
      trigger: true
    - get: version
      passed:
      - master-sonar-tests
      trigger: true
    - get: concourse

  - task: build-deadrequestssearcher
    input_mapping:
      code-root: function-app
    output_mapping:
      code-root: function-app
    params:
      COMPONENT_NAME: ((component.name.etsdrs))
      CS_PROJECT_PATH: ((component.cs_project_path.etsdrs))
      BUILD_CONFIGURATION: ((component.build_configuration))
      SRC: ((component.src.etsdrs))
    file: concourse/build/dotnet-build-almagest-task.yml
  - in_parallel:
    - put: azure-blobstore-qa-etsdrs
      params:
        file: packaged-code/((artifact.name.etsdrs))
    - put: azure-blobstore-ppe-etsdrs
      params:
        file: packaged-code/((artifact.name.etsdrs))
    - put: azure-blobstore-ppe-etsdrs-dr
      params:
        file: packaged-code/((artifact.name.etsdrs))
    - put: azure-blobstore-prod-etsdrs
      params:
        file: packaged-code/((artifact.name.etsdrs))
    - put: azure-blobstore-prod-etsdrs-dr
      params:
        file: packaged-code/((artifact.name.etsdrs))
###---QA---###
- name: terraform-plan-qa
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: cicd
    - get: concourse
    - get: version
      passed:
      - master-build-publish-etsae
      - master-build-publish-etspe
      - master-build-publish-etscn
      - master-build-publish-etsrr
      - master-build-publish-etsdrs
      trigger: true
  - task: run-terraform
    input_mapping:
      code-root: cicd
      version: version
    vars:
      <<: *az-credentials-qa
      <<: *terraform-params
      terraform-commands: |
        terraform init -reconfigure -backend-config=../../../environments/qa/((terraform.env_folder))/terraform.backendconfig
        terraform plan -var-file=../../../environments/qa/((terraform.env_folder))/terraform.tfvars \
          -var source_zip_file_name_etsae=((component.name.etsae))-$VERSION.zip \
          -var source_zip_file_name_etspe=((component.name.etspe))-$VERSION.zip \
          -var source_zip_file_name_etscn=((component.name.etscn))-$VERSION.zip \
          -var source_zip_file_name_etsrr=((component.name.etsrr))-$VERSION.zip \
          -var source_zip_file_name_etsdrs=((component.name.etsdrs))-$VERSION.zip \
          -var ZipArtifactVersion=$VERSION \
          -var secret_name_snowflk_login='((azure:entitlements-qa.SnowflakeEntitlementServiceAccountLogin))' \
          -var secret_name_snowflk_pass='((azure:entitlements-qa.SnowflakeEntitlementServiceAccountPswd))' \
          -var secret_name_snowflk_replication_login='((azure:entitlements-qa.SnowflakeReplicationAccountLogin))' \
          -var secret_name_snowflk_replication_pass='((azure:entitlements-qa.SnowflakeReplicationAccountPswd))' \
          -var secret_name_snowflk_connstring='((azure:entitlements-qa.SF-ConnectionString-azure-east-us-2))' \
          -var secret_name_snowflk_connstringslot='((azure:entitlements-qa.SF-ConnectionString-Slot-azure-east-us-2))' \
          -var secret_name_snowflk_replicanodes='((azure:entitlements-qa.SnowflakeReplicaNodes))' \
          -var secret_name_compass_key='((azure:general-qa.cam-subscription-pk))' \
          -var secret_name_snowflk_connstring_aws='((azure:entitlements-qa.SF-ConnectionString-aws-us-east-1))' \
          -var secret_name_snowflk_connstringslot_aws='((azure:entitlements-qa.SF-ConnectionString-Slot-aws-us-east-1))' \
          -var QacFunctionAppId='((azure:entitlements-qa.QacFunctionAppId))' --out=plan.tfplan
    file: concourse/terraform/run-terraform-task.yaml
- name: terraform-apply-qa
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: cicd
      passed:
      - terraform-plan-qa
    - get: version
      passed:
      - terraform-plan-qa
    - get: concourse
      params:
        depth: 1
      passed:
      - terraform-plan-qa
  - task: run-terraform
    input_mapping:
      code-root: cicd
      version: version
    vars:
      <<: *az-credentials-qa
      <<: *terraform-params
      terraform-commands: |
        terraform init -reconfigure -backend-config=../../../environments/qa/((terraform.env_folder))/terraform.backendconfig
        terraform plan -var-file=../../../environments/qa/((terraform.env_folder))/terraform.tfvars \
          -var source_zip_file_name_etsae=((component.name.etsae))-$VERSION.zip \
          -var source_zip_file_name_etspe=((component.name.etspe))-$VERSION.zip \
          -var source_zip_file_name_etscn=((component.name.etscn))-$VERSION.zip \
          -var source_zip_file_name_etsrr=((component.name.etsrr))-$VERSION.zip \
          -var source_zip_file_name_etsdrs=((component.name.etsdrs))-$VERSION.zip \
          -var ZipArtifactVersion=$VERSION \
          -var secret_name_snowflk_replication_login='((azure:entitlements-qa.SnowflakeReplicationAccountLogin))' \
          -var secret_name_snowflk_replication_pass='((azure:entitlements-qa.SnowflakeReplicationAccountPswd))' \
          -var secret_name_snowflk_login='((azure:entitlements-qa.SnowflakeEntitlementServiceAccountLogin))' \
          -var secret_name_snowflk_pass='((azure:entitlements-qa.SnowflakeEntitlementServiceAccountPswd))' \
          -var secret_name_snowflk_connstring='((azure:entitlements-qa.SF-ConnectionString-azure-east-us-2))' \
          -var secret_name_snowflk_connstringslot='((azure:entitlements-qa.SF-ConnectionString-Slot-azure-east-us-2))' \
          -var secret_name_snowflk_replicanodes='((azure:entitlements-qa.SnowflakeReplicaNodes))' \
          -var secret_name_compass_key='((azure:general-qa.cam-subscription-pk))' \
          -var secret_name_snowflk_connstring_aws='((azure:entitlements-qa.SF-ConnectionString-aws-us-east-1))' \
          -var secret_name_snowflk_connstringslot_aws='((azure:entitlements-qa.SF-ConnectionString-Slot-aws-us-east-1))' \
          -var QacFunctionAppId='((azure:entitlements-qa.QacFunctionAppId))' --out=plan.tfplan
        terraform apply  --parallelism=1 plan.tfplan
    file: concourse/terraform/run-terraform-task.yaml
- name: deploy-sqlscripts-qa
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: function-app
    - get: version
      passed:
      - terraform-apply-qa
      trigger: true
    - get: cicd
    - get: concourse
  - in_parallel:
    - task: execute-python-qa
      input_mapping:
        function-app: function-app
        cicd: cicd
        version: version
      vars:
        snowflakeConnectionString: ((azure:entitlements-qa.SF-ConnectionString-azure-east-us-2))
        sqlScriptsFolderOrFilesList: "../../../function-app/SnowflakeScripts/Apply"
        snowflakeUser: ((azure:general-qa.SnowflakeServiceAccountLoginId))
        snowflakePassword: ((azure:general-qa.SnowflakeServiceAccountPswd))
        artifactVersion: ""
        exec_path: ((sql-scripts.exec_path))
        isSlot: "false"
      file: cicd/scripts/storproc-update/deploy/snowflakeproc.yml
    - task: execute-python-qa-slot
      input_mapping:
        function-app: function-app
        cicd: cicd
        version: version
      vars:
        snowflakeConnectionString: ((azure:entitlements-qa.SF-ConnectionString-Slot-azure-east-us-2))
        sqlScriptsFolderOrFilesList: "../../../function-app/SnowflakeScripts/Apply"
        snowflakeUser: ((azure:general-qa.SnowflakeServiceAccountLoginId))
        snowflakePassword: ((azure:general-qa.SnowflakeServiceAccountPswd))
        artifactVersion: ""
        exec_path: ((sql-scripts.exec_path))
        isSlot: "true"
      file: cicd/scripts/storproc-update/deploy/snowflakeproc.yml
  - task: refresh-function-etsrr
    input_mapping: 
      concourse: concouse
    vars:
      functionkey: ((azure:entitlements-qa.etsrr_key))
      functionURL: ((azure:entitlements-qa.etsrr_refresh_url))
      curl-commands: |
        curl -d --location --request POST "$functionURL" --header "x-functions-key:"$functionkey""
    file: concourse/curl/task.yml
  - task: azcli-restart-function-apps
    input_mapping:
      code-root: cicd
    vars:
      <<: *az-credentials-qa
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp restart --name ((az-cli.qa.etspe)) --slot dev --resource-group ((az-cli.rg-name))
        az functionapp restart --name ((az-cli.qa.etscn)) --slot dev --resource-group ((az-cli.rg-name))
        
    file: concourse/azure-cli/azure-cli-task.yml
- name: smoke-test-qa
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: cicd
      params:
        depth: 1
      passed:
      - deploy-sqlscripts-qa
    - get: version
      passed:
      - deploy-sqlscripts-qa
      trigger: true
    - get: concourse
      passed:
      - slot-settings-qa
    - get: function-app
  - task: smoke-test-qa
    input_mapping:
      code-root: function-app
      version: version
    vars:
      <<: *az-credentials-qa
      <<: *bams-general
      Azure__Functions__AcceptEntitlementSecretName: ((smoke-test.general.Azure__Functions__AcceptEntitlementSecretName))
      Azure__Blobs__EntitlementStorageSecretName: ((smoke-test.general.Azure__Blobs__EntitlementStorageSecretName))
      Azure__Functions__RefreshReplicaSecretName: ((smoke-test.general.Azure_Functions_RefreshReplicaSecretName))
      Azure__KeyVaults__KeyVault: ((smoke-test.qa.Azure__KeyVaults__KeyVault))
      Azure__KeyVaults__SnowflakePasswordVault: ((smoke-test.qa.Azure__KeyVaults__SnowflakePasswordVault))
      Snowflake__Internal__User: ((azure:general-qa.SnowflakeServiceAccountLoginId))
      Snowflake__Internal__Password: ((azure:general-qa.SnowflakeServiceAccountPswd))
      Snowflake__Internal__Schema: ((smoke-test.general.Snowflake__Internal__Schema))
      Application__CustomerIdName: ((smoke-test.qa.Application__CustomerIdName))
      EnvironmentName: ((azure:general-qa.EnvironmentName))
      ScriptsVersion: ""
      TestRailConnectionString: ((azure:general-qa.TestRailConnectionString))
      SnowflakeInternal: ((azure:entitlements-qa.SF-ConnectionString-azure-east-us-2))
      SnowflakeExternal: ((azure:entitlements-qa.Snowflake_External_Primary_ConnectionString))
      CosmosDbName: dds-logging
      UseTestDb: true
      Application__Timeout: "00:10:00"
      Application__Interval: "00:00:05"
    file: concourse/smoke-tests/smoke-test.yml
- name: smoke-test-qa-replica
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: version
      passed:
      - smoke-test-qa
      trigger: true
    - get: concourse
    - get: function-app
  - task: smoke-test
    input_mapping:
      code-root: function-app
      version: version
    vars:
      <<: *az-credentials-qa
      <<: *bams-general
      Azure__Functions__AcceptEntitlementSecretName: ((smoke-test.general.Azure__Functions__AcceptEntitlementSecretName))
      Azure__Blobs__EntitlementStorageSecretName: ((smoke-test.general.Azure__Blobs__EntitlementStorageSecretName))
      Azure__Functions__RefreshReplicaSecretName: ((smoke-test.general.Azure_Functions_RefreshReplicaSecretName))
      Azure__KeyVaults__KeyVault: ((smoke-test.qa.Azure__KeyVaults__KeyVault))
      Azure__KeyVaults__SnowflakePasswordVault: ((smoke-test.qa.Azure__KeyVaults__SnowflakePasswordVault))
      Snowflake__Internal__User: ((azure:general-qa.SnowflakeServiceAccountLoginId))
      Snowflake__Internal__Password: ((azure:general-qa.SnowflakeServiceAccountPswd))
      Snowflake__Internal__Schema: ((smoke-test.general.Snowflake__Internal__Schema))
      Application__CustomerIdName: ((smoke-test.qa.Application__CustomerIdName))
      EnvironmentName: ((azure:general-qa.EnvironmentName))
      ScriptsVersion: ""
      TestRailConnectionString: ((azure:general-qa.TestRailConnectionString))
      SnowflakeInternal: ((azure:entitlements-qa.SF-ConnectionString-aws-us-east-1))
      SnowflakeExternal: ((azure:entitlements-qa.Snowflake_External_DR_ConnectionString))
      UseTestDb: false
      Application__Timeout: "00:10:00"
      Application__Interval: "00:00:05"
    file: concourse/smoke-tests/smoke-test-dr-dev.yml
- name: slot-settings-qa
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: concourse
      passed:
      - terraform-apply-qa
    - get: version
      passed:
      - terraform-apply-qa  
  - task: azcli-slot-sticky-settings-qa
    input_mapping:
      code-root: cicd
    vars:
      <<: *az-credentials-qa
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp config appsettings set --name ((az-cli.qa.etsae)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "EntitlementsContainerName=((slot-settings.etscontainer))"
        az functionapp config appsettings set --name ((az-cli.qa.etspe)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "EntitlementsContainerName=((slot-settings.etscontainer))"

        az functionapp config appsettings set --name ((az-cli.qa.etsae)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "FailedEntitlementsContainerName=((slot-settings.failetscontainer))"
        az functionapp config appsettings set --name ((az-cli.qa.etspe)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "FailedEntitlementsContainerName=((slot-settings.failetscontainer))"

        az functionapp config appsettings set --name ((az-cli.qa.etsae)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "AppId=((slot-settings.appid.etsae))"
        az functionapp config appsettings set --name ((az-cli.qa.etspe)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "AppId=((slot-settings.appid.etspe))"
        az functionapp config appsettings set --name ((az-cli.qa.etscn)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "AppId=((slot-settings.appid.etscn))"
        az functionapp config appsettings set --name ((az-cli.qa.etsrr)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "AppId=((slot-settings.appid.etsrr))"
        az functionapp config appsettings set --name ((az-cli.qa.etsdrs)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "AppId=((slot-settings.appid.etsdrs))"

        az functionapp config appsettings set --name ((az-cli.qa.etsae)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "((slot-settings.hubname.setting))=((slot-settings.hubname.etsae))"
        az functionapp config appsettings set --name ((az-cli.qa.etspe)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "((slot-settings.hubname.setting))=((slot-settings.hubname.etspe))"
        az functionapp config appsettings set --name ((az-cli.qa.etsrr)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "((slot-settings.hubname.setting))=((slot-settings.hubname.etsrr))"
        az functionapp config appsettings set --name ((az-cli.qa.etsdrs)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "((slot-settings.hubname.setting))=((slot-settings.hubname.etsdrs))"
        az functionapp config appsettings set --name ((az-cli.qa.etscn)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "((slot-settings.hubname.setting))=((slot-settings.hubname.etscn))"

        az functionapp config appsettings set --name ((az-cli.qa.etsae)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "CosmosDBName=((slot-settings.cosmos.dbname))"
        az functionapp config appsettings set --name ((az-cli.qa.etspe)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "CosmosDBName=((slot-settings.cosmos.dbname))"
        az functionapp config appsettings set --name ((az-cli.qa.etscn)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "CosmosDBName=((slot-settings.cosmos.dbname))"
        az functionapp config appsettings set --name ((az-cli.qa.etsrr)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "CosmosDBName=((slot-settings.cosmos.dbname))"
        az functionapp config appsettings set --name ((az-cli.qa.etsdrs)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "CosmosDBName=((slot-settings.cosmos.dbname))"
        
        az functionapp config appsettings set --name ((az-cli.qa.etspe)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "((slot-settings.snowflake.setting))=((slot-settings.snowflake.string))"

        az functionapp config appsettings set --name ((az-cli.qa.etsae)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "EntitlementsQueue=((slot-settings.entitlementsqueue))"
        az functionapp config appsettings set --name ((az-cli.qa.etspe)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "EntitlementsQueue=((slot-settings.entitlementsqueue))"
        az functionapp config appsettings set --name ((az-cli.qa.etsdrs)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "EntitlementsQueue=((slot-settings.entitlementsqueue))"

        az functionapp config appsettings set --name ((az-cli.qa.etsae)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "RemovalContainerName=((slot-settings.rmvcontainer))"
        az functionapp config appsettings set --name ((az-cli.qa.etsae)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "FailedRemovalContainerName=((slot-settings.flrmvcontainer))"

        az functionapp config appsettings set --name ((az-cli.qa.etspe)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "RemovalContainerName=((slot-settings.rmvcontainer))"
        az functionapp config appsettings set --name ((az-cli.qa.etspe)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "FailedRemovalContainerName=((slot-settings.flrmvcontainer))"
        
        az functionapp config appsettings set --name ((az-cli.qa.etscn)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "IsSlotEnvironment=((slot-settings.isslotenv))"

    file: concourse/azure-cli/azure-cli-task.yml
- name: azcli-slot-swap-qa-etsae
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - get: concourse
  - get: version
    passed:
    - smoke-test-qa-replica
    trigger: true
  - task: azcli-slot-swap-etsae
    input_mapping:
      code-root: cicd
    vars:
      <<: *az-credentials-qa
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp deployment slot swap -g ((az-cli.rg-name)) -n ((az-cli.qa.etsae)) --slot dev --target-slot production
    file: concourse/azure-cli/azure-cli-task.yml
- name: azcli-slot-swap-qa-etspe
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - get: concourse
  - get: version
    passed:
    - smoke-test-qa-replica
    trigger: true
  - task: azcli-slot-swap-etspe
    input_mapping:
      code-root: cicd
    vars:
      <<: *az-credentials-qa
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp deployment slot swap -g ((az-cli.rg-name)) -n ((az-cli.qa.etspe)) --slot dev --target-slot production
    file: concourse/azure-cli/azure-cli-task.yml
- name: azcli-slot-swap-qa-etscn
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - get: concourse
  - get: version
    passed:
    - smoke-test-qa-replica
    trigger: true
  - task: azcli-slot-swap-etscn
    input_mapping:
      code-root: cicd
    vars:
      <<: *az-credentials-qa
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp deployment slot swap -g ((az-cli.rg-name)) -n ((az-cli.qa.etscn)) --slot dev --target-slot production
    file: concourse/azure-cli/azure-cli-task.yml
- name: azcli-slot-swap-qa-etsrr
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - get: concourse
  - get: version
    passed:
    - smoke-test-qa-replica
    trigger: true
  - task: azcli-slot-swap-etsrr
    input_mapping:
      code-root: cicd
    vars:
      <<: *az-credentials-qa
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp deployment slot swap -g ((az-cli.rg-name)) -n ((az-cli.qa.etsrr)) --slot dev --target-slot production
    file: concourse/azure-cli/azure-cli-task.yml
- name: azcli-slot-swap-qa-etsdrs
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - get: concourse
  - get: version
    passed:
    - smoke-test-qa-replica
    trigger: true
  - task: azcli-slot-swap-etsdrs
    input_mapping:
      code-root: cicd
    vars:
      <<: *az-credentials-qa
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp deployment slot swap -g ((az-cli.rg-name)) -n ((az-cli.qa.etsdrs)) --slot dev --target-slot production
    file: concourse/azure-cli/azure-cli-task.yml
- name: promote-to-ppe
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: concourse
    - get: version
      passed:
      - azcli-slot-swap-qa-etsae
      - azcli-slot-swap-qa-etspe
      - azcli-slot-swap-qa-etscn
      - azcli-slot-swap-qa-etsdrs
      - azcli-slot-swap-qa-etsrr
  - task: promote-build
    input_mapping:
      version: version
    vars:
      version: ""
      secret_key : ppe-version
      vault_addr: ((vault.vault-addr))
    params:
      VAULT_PATH: ((vault.vault-path-version))
    file: concourse/build/promote-build.yml
###---PPE---###
- name: terraform-plan-ppe
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: cicd
    - get: concourse

  - task: run-terraform
    input_mapping:
      code-root: cicd
      version: version
    vars:
      <<: *az-credentials-ppe
      <<: *terraform-params
      terraform-commands: |
        terraform init -reconfigure -backend-config=../../../environments/ppe/((terraform.env_folder))/terraform.backendconfig
        terraform plan -var-file=../../../environments/ppe/((terraform.env_folder))/terraform.tfvars \
          -var source_zip_file_name_etsae=((component.name.etsae))-((vault.ppe-version)).zip \
          -var source_zip_file_name_etspe=((component.name.etspe))-((vault.ppe-version)).zip \
          -var source_zip_file_name_etscn=((component.name.etscn))-((vault.ppe-version)).zip \
          -var source_zip_file_name_etsrr=((component.name.etsrr))-((vault.ppe-version)).zip \
          -var source_zip_file_name_etsdrs=((component.name.etsdrs))-((vault.ppe-version)).zip \
          -var ZipArtifactVersion=((vault.ppe-version)) \
          -var secret_name_snowflk_login='((azure:entitlements-ppe.SnowflakeEntitlementServiceAccountLogin))' \
          -var secret_name_snowflk_pass='((azure:entitlements-ppe.SnowflakeEntitlementServiceAccountPswd))' \
          -var secret_name_snowflk_replication_login='((azure:entitlements-ppe.SnowflakeReplicationAccountLogin))' \
          -var secret_name_snowflk_replication_pass='((azure:entitlements-ppe.SnowflakeReplicationAccountPswd))' \
          -var secret_name_snowflk_connstring='((azure:entitlements-ppe.SF-ConnectionString-azure-east-us-2))' \
          -var secret_name_snowflk_connstringslot='((azure:entitlements-ppe.SF-ConnectionString-Slot-azure-east-us-2))' \
          -var secret_name_snowflk_replicanodes='((azure:entitlements-ppe.SnowflakeReplicaNodes))' \
          -var secret_name_compass_key='((azure:general-ppe.cam-subscription-pk))' \
          -var secret_name_snowflk_connstring_aws='((azure:entitlements-ppe.SF-ConnectionString-aws-eu-west-1))' \
          -var secret_name_snowflk_connstringslot_aws='((azure:entitlements-ppe.SF-ConnectionString-Slot-aws-eu-west-1))' \
          -var secret_name_snowflk_connstring_dr='((azure:entitlements-ppe.SF-ConnectionString-azure-central-us))' \
          -var secret_name_snowflk_connstringslot_dr='((azure:entitlements-ppe.SF-ConnectionString-Slot-azure-central-us))' \
          -var QacFunctionAppId='((azure:entitlements-ppe.QacFunctionAppId))' --out=plan.tfplan
    file: concourse/terraform/run-terraform-task.yaml
- name: terraform-plan-ppe-dr
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: cicd
    - get: concourse

  - task: run-terraform
    input_mapping:
      code-root: cicd
      version: version
    vars:
      <<: *az-credentials-ppe
      <<: *terraform-params
      terraform-commands: |
        terraform init -reconfigure -backend-config=../../../environments/dr-ppe/((terraform.env_folder))/terraform.backendconfig
        terraform plan -var-file=../../../environments/dr-ppe/((terraform.env_folder))/terraform.tfvars \
          -var source_zip_file_name_etsae=((component.name.etsae))-((vault.ppe-version)).zip \
          -var source_zip_file_name_etspe=((component.name.etspe))-((vault.ppe-version)).zip \
          -var source_zip_file_name_etscn=((component.name.etscn))-((vault.ppe-version)).zip \
          -var source_zip_file_name_etsrr=((component.name.etsrr))-((vault.ppe-version)).zip \
          -var source_zip_file_name_etsdrs=((component.name.etsdrs))-((vault.ppe-version)).zip \
          -var ZipArtifactVersion=((vault.ppe-version)) \
          -var secret_name_snowflk_login='((azure:entitlements-ppe.SnowflakeEntitlementServiceAccountLogin))' \
          -var secret_name_snowflk_pass='((azure:entitlements-ppe.SnowflakeEntitlementServiceAccountPswd))' \
          -var secret_name_snowflk_replication_login='((azure:entitlements-ppe.SnowflakeReplicationAccountLogin))' \
          -var secret_name_snowflk_replication_pass='((azure:entitlements-ppe.SnowflakeReplicationAccountPswd))' \
          -var secret_name_snowflk_connstring='((azure:entitlements-ppe.SF-ConnectionString-azure-east-us-2))' \
          -var secret_name_snowflk_connstringslot='((azure:entitlements-ppe.SF-ConnectionString-Slot-azure-east-us-2))' \
          -var secret_name_snowflk_replicanodes='((azure:entitlements-ppe.SnowflakeReplicaNodes))' \
          -var secret_name_compass_key='((azure:general-ppe.cam-subscription-pk))' \
          -var secret_name_snowflk_connstring_aws='((azure:entitlements-ppe.SF-ConnectionString-aws-eu-west-1))' \
          -var secret_name_snowflk_connstringslot_aws='((azure:entitlements-ppe.SF-ConnectionString-Slot-aws-eu-west-1))' \
          -var secret_name_snowflk_connstring_dr='((azure:entitlements-ppe.SF-ConnectionString-azure-central-us))' \
          -var secret_name_snowflk_connstringslot_dr='((azure:entitlements-ppe.SF-ConnectionString-Slot-azure-central-us))' \
          -var QacFunctionAppId='((azure:entitlements-ppe.QacFunctionAppId))' --out=plan.tfplan
    file: concourse/terraform/run-terraform-task.yaml
- name: terraform-apply-ppe
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: cicd
      passed:
      - terraform-plan-ppe
    - get: concourse
      params:
        depth: 1
      passed:
      - terraform-plan-ppe
  - task: run-terraform
    input_mapping:
      code-root: cicd
      version: version
    vars:
      <<: *az-credentials-ppe
      <<: *terraform-params
      terraform-commands: |
        terraform init -reconfigure -backend-config=../../../environments/ppe/((terraform.env_folder))/terraform.backendconfig
        terraform plan -var-file=../../../environments/ppe/((terraform.env_folder))/terraform.tfvars \
          -var source_zip_file_name_etsae=((component.name.etsae))-((vault.ppe-version)).zip \
          -var source_zip_file_name_etspe=((component.name.etspe))-((vault.ppe-version)).zip \
          -var source_zip_file_name_etscn=((component.name.etscn))-((vault.ppe-version)).zip \
          -var source_zip_file_name_etsrr=((component.name.etsrr))-((vault.ppe-version)).zip \
          -var source_zip_file_name_etsdrs=((component.name.etsdrs))-((vault.ppe-version)).zip \
          -var ZipArtifactVersion=((vault.ppe-version)) \
          -var secret_name_snowflk_login='((azure:entitlements-ppe.SnowflakeEntitlementServiceAccountLogin))' \
          -var secret_name_snowflk_pass='((azure:entitlements-ppe.SnowflakeEntitlementServiceAccountPswd))' \
          -var secret_name_snowflk_replication_login='((azure:entitlements-ppe.SnowflakeReplicationAccountLogin))' \
          -var secret_name_snowflk_replication_pass='((azure:entitlements-ppe.SnowflakeReplicationAccountPswd))' \
          -var secret_name_snowflk_connstring='((azure:entitlements-ppe.SF-ConnectionString-azure-east-us-2))' \
          -var secret_name_snowflk_connstringslot='((azure:entitlements-ppe.SF-ConnectionString-Slot-azure-east-us-2))' \
          -var secret_name_snowflk_replicanodes='((azure:entitlements-ppe.SnowflakeReplicaNodes))' \
          -var secret_name_compass_key='((azure:general-ppe.cam-subscription-pk))' \
          -var secret_name_snowflk_connstring_aws='((azure:entitlements-ppe.SF-ConnectionString-aws-eu-west-1))' \
          -var secret_name_snowflk_connstringslot_aws='((azure:entitlements-ppe.SF-ConnectionString-Slot-aws-eu-west-1))' \
          -var secret_name_snowflk_connstring_dr='((azure:entitlements-ppe.SF-ConnectionString-azure-central-us))' \
          -var secret_name_snowflk_connstringslot_dr='((azure:entitlements-ppe.SF-ConnectionString-Slot-azure-central-us))' \
          -var QacFunctionAppId='((azure:entitlements-ppe.QacFunctionAppId))' --out=plan.tfplan
        terraform apply  --parallelism=1 plan.tfplan
    file: concourse/terraform/run-terraform-task.yaml
- name: terraform-apply-ppe-dr
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: cicd
      passed:
      - terraform-plan-ppe-dr
    - get: concourse
      params:
        depth: 1
      passed:
      - terraform-plan-ppe-dr
  - task: run-terraform
    input_mapping:
      code-root: cicd
      version: version
    vars:
      <<: *az-credentials-ppe
      <<: *terraform-params
      terraform-commands: |
        terraform init -reconfigure -backend-config=../../../environments/dr-ppe/((terraform.env_folder))/terraform.backendconfig
        terraform plan -var-file=../../../environments/dr-ppe/((terraform.env_folder))/terraform.tfvars \
          -var source_zip_file_name_etsae=((component.name.etsae))-((vault.ppe-version)).zip \
          -var source_zip_file_name_etspe=((component.name.etspe))-((vault.ppe-version)).zip \
          -var source_zip_file_name_etscn=((component.name.etscn))-((vault.ppe-version)).zip \
          -var source_zip_file_name_etsrr=((component.name.etsrr))-((vault.ppe-version)).zip \
          -var source_zip_file_name_etsdrs=((component.name.etsdrs))-((vault.ppe-version)).zip \
          -var ZipArtifactVersion=((vault.ppe-version)) \
          -var secret_name_snowflk_login='((azure:entitlements-ppe.SnowflakeEntitlementServiceAccountLogin))' \
          -var secret_name_snowflk_pass='((azure:entitlements-ppe.SnowflakeEntitlementServiceAccountPswd))' \
          -var secret_name_snowflk_replication_login='((azure:entitlements-ppe.SnowflakeReplicationAccountLogin))' \
          -var secret_name_snowflk_replication_pass='((azure:entitlements-ppe.SnowflakeReplicationAccountPswd))' \
          -var secret_name_snowflk_connstring='((azure:entitlements-ppe.SF-ConnectionString-azure-east-us-2))' \
          -var secret_name_snowflk_connstringslot='((azure:entitlements-ppe.SF-ConnectionString-Slot-azure-east-us-2))' \
          -var secret_name_snowflk_replicanodes='((azure:entitlements-ppe.SnowflakeReplicaNodes))' \
          -var secret_name_compass_key='((azure:general-ppe.cam-subscription-pk))' \
          -var secret_name_snowflk_connstring_aws='((azure:entitlements-ppe.SF-ConnectionString-aws-eu-west-1))' \
          -var secret_name_snowflk_connstringslot_aws='((azure:entitlements-ppe.SF-ConnectionString-Slot-aws-eu-west-1))' \
          -var secret_name_snowflk_connstring_dr='((azure:entitlements-ppe.SF-ConnectionString-azure-central-us))' \
          -var secret_name_snowflk_connstringslot_dr='((azure:entitlements-ppe.SF-ConnectionString-Slot-azure-central-us))' \
          -var QacFunctionAppId='((azure:entitlements-ppe.QacFunctionAppId))' --out=plan.tfplan
        terraform apply  --parallelism=1 plan.tfplan
    file: concourse/terraform/run-terraform-task.yaml
- name: deploy-sqlscripts-ppe
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: function-app
    - get: cicd
      passed:
      - terraform-apply-ppe
      trigger: true
    - get: concourse
  - in_parallel:
    - task: execute-python-qa
      input_mapping:
        function-app: function-app
        cicd: cicd
        version: version
      vars:
        snowflakeConnectionString: ((azure:entitlements-ppe.SF-ConnectionString-azure-east-us-2))
        sqlScriptsFolderOrFilesList: "../../../function-app/SnowflakeScripts/Apply"
        snowflakeUser: ((azure:general-ppe.SnowflakeServiceAccountLoginId))
        snowflakePassword: ((azure:general-ppe.SnowflakeServiceAccountPswd))
        artifactVersion: ((vault.ppe-version))
        exec_path: ((sql-scripts.exec_path))
        isSlot: "false"
      file: cicd/scripts/storproc-update/deploy/snowflakeproc.yml
    - task: execute-python-ppe-slot
      input_mapping:
        function-app: function-app
        cicd: cicd
        version: version
      vars:
        snowflakeConnectionString: ((azure:entitlements-ppe.SF-ConnectionString-Slot-azure-east-us-2))
        sqlScriptsFolderOrFilesList: "../../../function-app/SnowflakeScripts/Apply"
        snowflakeUser: ((azure:general-ppe.SnowflakeServiceAccountLoginId))
        snowflakePassword: ((azure:general-ppe.SnowflakeServiceAccountPswd))
        artifactVersion: ((vault.ppe-version))
        exec_path: ((sql-scripts.exec_path))
        isSlot: "true"
      file: cicd/scripts/storproc-update/deploy/snowflakeproc.yml
  - task: refresh-function-etsrr
    input_mapping: 
      concourse: concouse
    vars:
      functionkey: ((azure:entitlements-ppe.etsrr_key))
      functionURL: ((azure:entitlements-ppe.etsrr_refresh_url))
      curl-commands: |
        curl -d --location --request POST "$functionURL" --header "x-functions-key:"$functionkey""
    file: concourse/curl/task.yml
  - task: azcli-restart-function-apps
    input_mapping:
      code-root: cicd
    vars:
      <<: *az-credentials-ppe
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp restart --name ((az-cli.ppe.etspe)) --slot dev --resource-group ((az-cli.rg-name))
        az functionapp restart --name ((az-cli.ppe.etscn)) --slot dev --resource-group ((az-cli.rg-name))
        
    file: concourse/azure-cli/azure-cli-task.yml
- name: smoke-test-ppe
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: cicd
      params:
        depth: 1
      passed:
      - deploy-sqlscripts-ppe
      trigger: true
    - get: concourse
    - get: function-app
  - task: smoke-test-ppe
    input_mapping:
      code-root: function-app
    vars:
      <<: *az-credentials-ppe
      <<: *bams-general
      Azure__Functions__AcceptEntitlementSecretName: ((smoke-test.general.Azure__Functions__AcceptEntitlementSecretName))
      Azure__Blobs__EntitlementStorageSecretName: ((smoke-test.general.Azure__Blobs__EntitlementStorageSecretName))
      Azure__Functions__RefreshReplicaSecretName: ((smoke-test.general.Azure_Functions_RefreshReplicaSecretName))
      Azure__KeyVaults__KeyVault: ((smoke-test.ppe.Azure__KeyVaults__KeyVault))
      Azure__KeyVaults__SnowflakePasswordVault: ((smoke-test.ppe.Azure__KeyVaults__SnowflakePasswordVault))
      Snowflake__Internal__User: ((azure:general-ppe.SnowflakeServiceAccountLoginId))
      Snowflake__Internal__Password: ((azure:general-ppe.SnowflakeServiceAccountPswd))
      Snowflake__Internal__Schema: ((smoke-test.general.Snowflake__Internal__Schema))
      Application__CustomerIdName: ((smoke-test.ppe.Application__CustomerIdName))
      EnvironmentName: ((azure:general-ppe.EnvironmentName))
      ScriptsVersion: ((vault.ppe-version))
      TestRailConnectionString: ((azure:general-ppe.TestRailConnectionString))
      SnowflakeInternal: ((azure:entitlements-ppe.SF-ConnectionString-azure-east-us-2))
      SnowflakeExternal: ((azure:entitlements-ppe.Snowflake_External_Primary_ConnectionString))
      CosmosDbName: dds-logging
      UseTestDb: true
      Application__Timeout: "00:10:00"
      Application__Interval: "00:00:05"
    file: concourse/smoke-tests/smoke-test.yml
- name: smoke-test-ppe-dr
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: cicd
      params:
        depth: 1
    - get: concourse
      passed:
      - enable-function-apps-ppe-dr
      trigger: true
    - get: function-app
  - task: smoke-test-ppe-dr
    input_mapping:
      code-root: function-app
    vars:
      <<: *az-credentials-ppe
      <<: *bams-general
      Azure__Functions__AcceptEntitlementSecretName: ((smoke-test.general.Azure__Functions__AcceptEntitlementSecretName))
      Azure__Blobs__EntitlementStorageSecretName: ((smoke-test.general.Azure__Blobs__EntitlementStorageSecretName))
      Azure__KeyVaults__KeyVault: ((smoke-test.ppe.dr.Azure__KeyVaults__KeyVault))
      Azure__KeyVaults__SnowflakePasswordVault: ((smoke-test.ppe.dr.Azure__KeyVaults__SnowflakePasswordVault))
      Snowflake__Internal__User: ((azure:general-ppe.SnowflakeServiceAccountLoginId))
      Snowflake__Internal__Password: ((azure:general-ppe.SnowflakeServiceAccountPswd))
      Snowflake__Internal__Schema: ((smoke-test.general.Snowflake__Internal__Schema))
      Application__CustomerIdName: ((smoke-test.ppe.dr.Application__CustomerIdName))
      EnvironmentName: ((azure:general-ppe.EnvironmentName))
      ScriptsVersion: ((vault.ppe-version))
      TestRailConnectionString: ((azure:general-ppe.TestRailConnectionString))
      SnowflakeInternal: ((azure:entitlements-ppe.SF-ConnectionString-azure-central-us))
      SnowflakeExternal: ((azure:entitlements-ppe.Snowflake_External_DR_ConnectionString))
      CosmosDbName: dds-logging
      UseTestDb: true
      Application__Timeout: "00:10:00"
      Application__Interval: "00:00:05"
    file: concourse/smoke-tests/smoke-test.yml
- name: smoke-test-ppe-replica
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: concourse
      passed:
      - smoke-test-ppe
      trigger: true
    - get: function-app
  - task: smoke-test
    input_mapping:
      code-root: function-app
      version: version
    vars:
      <<: *az-credentials-ppe
      <<: *bams-general
      Azure__Functions__AcceptEntitlementSecretName: ((smoke-test.general.Azure__Functions__AcceptEntitlementSecretName))
      Azure__Blobs__EntitlementStorageSecretName: ((smoke-test.general.Azure__Blobs__EntitlementStorageSecretName))
      Azure__Functions__RefreshReplicaSecretName: ((smoke-test.general.Azure_Functions_RefreshReplicaSecretName))
      Azure__KeyVaults__KeyVault: ((smoke-test.ppe.Azure__KeyVaults__KeyVault))
      Azure__KeyVaults__SnowflakePasswordVault: ((smoke-test.ppe.Azure__KeyVaults__SnowflakePasswordVault))
      Snowflake__Internal__User: ((azure:general-ppe.SnowflakeServiceAccountLoginId))
      Snowflake__Internal__Password: ((azure:general-ppe.SnowflakeServiceAccountPswd))
      Snowflake__Internal__Schema: ((smoke-test.general.Snowflake__Internal__Schema))
      Application__CustomerIdName: ((smoke-test.ppe.Application__CustomerIdName))
      EnvironmentName: ((azure:general-ppe.EnvironmentName))
      ScriptsVersion: ((vault.ppe-version))
      TestRailConnectionString: ((azure:general-ppe.TestRailConnectionString))
      SnowflakeInternal: ((azure:entitlements-ppe.SF-ConnectionString-aws-us-east-1))
      SnowflakeExternal: ((azure:entitlements-ppe.Snowflake_External_DR_ConnectionString))
      UseTestDb: false
      Application__Timeout: "00:10:00"
      Application__Interval: "00:00:05"
    file: concourse/smoke-tests/smoke-test-dr-dev.yml
- name: slot-settings-ppe
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: concourse
      passed:
      - terraform-apply-ppe
  - task: azcli-slot-sticky-settings-ppe
    input_mapping:
      code-root: cicd
    vars:
      <<: *az-credentials-ppe
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp config appsettings set --name ((az-cli.ppe.etsae)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "EntitlementsContainerName=((slot-settings.etscontainer))"
        az functionapp config appsettings set --name ((az-cli.ppe.etspe)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "EntitlementsContainerName=((slot-settings.etscontainer))"

        az functionapp config appsettings set --name ((az-cli.ppe.etsae)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "FailedEntitlementsContainerName=((slot-settings.failetscontainer))"
        az functionapp config appsettings set --name ((az-cli.ppe.etspe)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "FailedEntitlementsContainerName=((slot-settings.failetscontainer))"

        az functionapp config appsettings set --name ((az-cli.ppe.etsae)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "AppId=((slot-settings.appid.etsae))"
        az functionapp config appsettings set --name ((az-cli.ppe.etspe)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "AppId=((slot-settings.appid.etspe))"
        az functionapp config appsettings set --name ((az-cli.ppe.etscn)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "AppId=((slot-settings.appid.etscn))"
        az functionapp config appsettings set --name ((az-cli.ppe.etsrr)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "AppId=((slot-settings.appid.etsrr))"
        az functionapp config appsettings set --name ((az-cli.ppe.etsdrs)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "AppId=((slot-settings.appid.etsdrs))"

        az functionapp config appsettings set --name ((az-cli.ppe.etsae)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "((slot-settings.hubname.setting))=((slot-settings.hubname.etsae))"
        az functionapp config appsettings set --name ((az-cli.ppe.etspe)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "((slot-settings.hubname.setting))=((slot-settings.hubname.etspe))"
        az functionapp config appsettings set --name ((az-cli.ppe.etsrr)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "((slot-settings.hubname.setting))=((slot-settings.hubname.etsrr))"
        az functionapp config appsettings set --name ((az-cli.ppe.etsdrs)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "((slot-settings.hubname.setting))=((slot-settings.hubname.etsdrs))"
        az functionapp config appsettings set --name ((az-cli.ppe.etscn)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "((slot-settings.hubname.setting))=((slot-settings.hubname.etscn))"

        az functionapp config appsettings set --name ((az-cli.ppe.etsae)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "CosmosDBName=((slot-settings.cosmos.dbname))"
        az functionapp config appsettings set --name ((az-cli.ppe.etspe)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "CosmosDBName=((slot-settings.cosmos.dbname))"
        az functionapp config appsettings set --name ((az-cli.ppe.etscn)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "CosmosDBName=((slot-settings.cosmos.dbname))"
        az functionapp config appsettings set --name ((az-cli.ppe.etsrr)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "CosmosDBName=((slot-settings.cosmos.dbname))"
        az functionapp config appsettings set --name ((az-cli.ppe.etsdrs)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "CosmosDBName=((slot-settings.cosmos.dbname))"
        
        az functionapp config appsettings set --name ((az-cli.ppe.etspe)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "((slot-settings.snowflake.setting))=((slot-settings.snowflake.string))"

        az functionapp config appsettings set --name ((az-cli.ppe.etsae)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "EntitlementsQueue=((slot-settings.entitlementsqueue))"
        az functionapp config appsettings set --name ((az-cli.ppe.etspe)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "EntitlementsQueue=((slot-settings.entitlementsqueue))"
        az functionapp config appsettings set --name ((az-cli.ppe.etsdrs)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "EntitlementsQueue=((slot-settings.entitlementsqueue))"

        az functionapp config appsettings set --name ((az-cli.ppe.etscn)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "IsSlotEnvironment=((slot-settings.isslotenv))"

    file: concourse/azure-cli/azure-cli-task.yml
- name: slot-settings-ppe-dr
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: concourse
      passed:
      - terraform-apply-ppe-dr
  - task: azcli-slot-sticky-settings-ppe-dr
    input_mapping:
      code-root: cicd
    vars:
      <<: *az-credentials-ppe
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp config appsettings set --name ((az-cli.dr.ppe.etsae)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "EntitlementsContainerName=((slot-settings.etscontainer))"
        az functionapp config appsettings set --name ((az-cli.dr.ppe.etspe)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "EntitlementsContainerName=((slot-settings.etscontainer))"

        az functionapp config appsettings set --name ((az-cli.dr.ppe.etsae)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "FailedEntitlementsContainerName=((slot-settings.failetscontainer))"
        az functionapp config appsettings set --name ((az-cli.dr.ppe.etspe)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "FailedEntitlementsContainerName=((slot-settings.failetscontainer))"

        az functionapp config appsettings set --name ((az-cli.dr.ppe.etsae)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "AppId=((slot-settings.appid.etsae))"
        az functionapp config appsettings set --name ((az-cli.dr.ppe.etspe)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "AppId=((slot-settings.appid.etspe))"
        az functionapp config appsettings set --name ((az-cli.dr.ppe.etscn)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "AppId=((slot-settings.appid.etscn))"
        az functionapp config appsettings set --name ((az-cli.dr.ppe.etsrr)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "AppId=((slot-settings.appid.etsrr))"
        az functionapp config appsettings set --name ((az-cli.dr.ppe.etsdrs)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "AppId=((slot-settings.appid.etsdrs))"

        az functionapp config appsettings set --name ((az-cli.dr.ppe.etsae)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "((slot-settings.hubname.setting))=((slot-settings.hubname.etsae))"
        az functionapp config appsettings set --name ((az-cli.dr.ppe.etspe)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "((slot-settings.hubname.setting))=((slot-settings.hubname.etspe))"
        az functionapp config appsettings set --name ((az-cli.dr.ppe.etsrr)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "((slot-settings.hubname.setting))=((slot-settings.hubname.etsrr))"
        az functionapp config appsettings set --name ((az-cli.dr.ppe.etsdrs)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "((slot-settings.hubname.setting))=((slot-settings.hubname.etsdrs))"
        az functionapp config appsettings set --name ((az-cli.dr.ppe.etscn)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "((slot-settings.hubname.setting))=((slot-settings.hubname.etscn))"

        az functionapp config appsettings set --name ((az-cli.dr.ppe.etsae)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "CosmosDBName=((slot-settings.cosmos.dbname))"
        az functionapp config appsettings set --name ((az-cli.dr.ppe.etspe)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "CosmosDBName=((slot-settings.cosmos.dbname))"
        az functionapp config appsettings set --name ((az-cli.dr.ppe.etscn)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "CosmosDBName=((slot-settings.cosmos.dbname))"
        az functionapp config appsettings set --name ((az-cli.dr.ppe.etsrr)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "CosmosDBName=((slot-settings.cosmos.dbname))"
        az functionapp config appsettings set --name ((az-cli.dr.ppe.etsdrs)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "CosmosDBName=((slot-settings.cosmos.dbname))"
        
        az functionapp config appsettings set --name ((az-cli.dr.ppe.etspe)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "((slot-settings.snowflake.setting))=((slot-settings.snowflake.string))"

        az functionapp config appsettings set --name ((az-cli.dr.ppe.etsae)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "EntitlementsQueue=((slot-settings.entitlementsqueue))"
        az functionapp config appsettings set --name ((az-cli.dr.ppe.etspe)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "EntitlementsQueue=((slot-settings.entitlementsqueue))"
        az functionapp config appsettings set --name ((az-cli.dr.ppe.etsdrs)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "EntitlementsQueue=((slot-settings.entitlementsqueue))"

        az functionapp config appsettings set --name ((az-cli.dr.ppe.etscn)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "IsSlotEnvironment=((slot-settings.isslotenv))"

    file: concourse/azure-cli/azure-cli-task.yml
- name: enable-function-apps-ppe-dr
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: concourse
      passed:
      - terraform-apply-ppe-dr
      trigger: true
  - task: azcli-enable-function-apps
    input_mapping:
      code-root: cicd
    vars:
      <<: *az-credentials-ppe
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp start --name ((az-cli.dr.ppe.etsae)) --resource-group ((az-cli.dr.rg-name))
        az functionapp start --name ((az-cli.dr.ppe.etspe)) --resource-group ((az-cli.dr.rg-name))
        az functionapp start --name ((az-cli.dr.ppe.etscn)) --resource-group ((az-cli.dr.rg-name))
        az functionapp start --name ((az-cli.dr.ppe.etsdrs)) --resource-group ((az-cli.dr.rg-name))
        az functionapp start --name ((az-cli.dr.ppe.etsrr)) --resource-group ((az-cli.dr.rg-name))
        az functionapp start --name ((az-cli.dr.ppe.etsae)) --slot dev --resource-group ((az-cli.dr.rg-name))
        az functionapp start --name ((az-cli.dr.ppe.etspe)) --slot dev --resource-group ((az-cli.dr.rg-name))
        az functionapp start --name ((az-cli.dr.ppe.etscn)) --slot dev --resource-group ((az-cli.dr.rg-name))
        az functionapp start --name ((az-cli.dr.ppe.etsdrs)) --slot dev --resource-group ((az-cli.dr.rg-name))
        az functionapp start --name ((az-cli.dr.ppe.etsrr)) --slot dev --resource-group ((az-cli.dr.rg-name))
        
    file: concourse/azure-cli/azure-cli-task.yml
- name: disable-function-apps-ppe-dr
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: concourse
      passed:
      - azcli-slot-swap-ppe-etsae-dr
      - azcli-slot-swap-ppe-etspe-dr
      - azcli-slot-swap-ppe-etscn-dr
      - azcli-slot-swap-ppe-etsdrs-dr
      - azcli-slot-swap-ppe-etsrr-dr
      trigger: true
  - task: azcli-disable-function-apps
    input_mapping:
      code-root: cicd
    vars:
      <<: *az-credentials-ppe
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp stop --name ((az-cli.dr.ppe.etsae)) --resource-group ((az-cli.dr.rg-name))
        az functionapp stop --name ((az-cli.dr.ppe.etspe)) --resource-group ((az-cli.dr.rg-name))
        az functionapp stop --name ((az-cli.dr.ppe.etscn)) --resource-group ((az-cli.dr.rg-name))
        az functionapp stop --name ((az-cli.dr.ppe.etsdrs)) --resource-group ((az-cli.dr.rg-name))
        az functionapp stop --name ((az-cli.dr.ppe.etsrr)) --resource-group ((az-cli.dr.rg-name))
        az functionapp stop --name ((az-cli.dr.ppe.etsae)) --slot dev --resource-group ((az-cli.dr.rg-name))
        az functionapp stop --name ((az-cli.dr.ppe.etspe)) --slot dev --resource-group ((az-cli.dr.rg-name))
        az functionapp stop --name ((az-cli.dr.ppe.etscn)) --slot dev --resource-group ((az-cli.dr.rg-name))
        az functionapp stop --name ((az-cli.dr.ppe.etsdrs)) --slot dev --resource-group ((az-cli.dr.rg-name))
        az functionapp stop --name ((az-cli.dr.ppe.etsrr)) --slot dev --resource-group ((az-cli.dr.rg-name))
        
    file: concourse/azure-cli/azure-cli-task.yml
- name: azcli-slot-swap-ppe-etsae
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - get: concourse
    passed:
    - smoke-test-ppe-replica
  - task: azcli-slot-swap-etsae
    input_mapping:
      code-root: cicd
    vars:
      <<: *az-credentials-ppe
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp deployment slot swap -g ((az-cli.rg-name)) -n ((az-cli.ppe.etsae)) --slot dev --target-slot production
    file: concourse/azure-cli/azure-cli-task.yml
- name: azcli-slot-swap-ppe-etspe
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - get: concourse
    passed:
    - smoke-test-ppe-replica

  - task: azcli-slot-swap-etspe
    input_mapping:
      code-root: cicd
    vars:
      <<: *az-credentials-ppe
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp deployment slot swap -g ((az-cli.rg-name)) -n ((az-cli.ppe.etspe)) --slot dev --target-slot production
    file: concourse/azure-cli/azure-cli-task.yml
- name: azcli-slot-swap-ppe-etscn
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - get: concourse
    passed:
    - smoke-test-ppe-replica

  - task: azcli-slot-swap-etscn
    input_mapping:
      code-root: cicd
    vars:
      <<: *az-credentials-ppe
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp deployment slot swap -g ((az-cli.rg-name)) -n ((az-cli.ppe.etscn)) --slot dev --target-slot production
    file: concourse/azure-cli/azure-cli-task.yml
- name: azcli-slot-swap-ppe-etsrr
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - get: concourse
    passed:
    - smoke-test-ppe-replica

  - task: azcli-slot-swap-etsrr
    input_mapping:
      code-root: cicd
    vars:
      <<: *az-credentials-ppe
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp deployment slot swap -g ((az-cli.rg-name)) -n ((az-cli.ppe.etsrr)) --slot dev --target-slot production
    file: concourse/azure-cli/azure-cli-task.yml
- name: azcli-slot-swap-ppe-etsdrs
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - get: concourse
    passed:
    - smoke-test-ppe-replica

  - task: azcli-slot-swap-etsdrs
    input_mapping:
      code-root: cicd
    vars:
      <<: *az-credentials-ppe
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp deployment slot swap -g ((az-cli.rg-name)) -n ((az-cli.ppe.etsdrs)) --slot dev --target-slot production
    file: concourse/azure-cli/azure-cli-task.yml
- name: azcli-slot-swap-ppe-etsae-dr
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - get: concourse
    passed:
    - smoke-test-ppe-dr
  - task: azcli-slot-swap-etsae-dr
    input_mapping:
      code-root: cicd
    vars:
      <<: *az-credentials-ppe
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp deployment slot swap -g ((az-cli.dr.rg-name)) -n ((az-cli.dr.ppe.etsae)) --slot dev --target-slot production
    file: concourse/azure-cli/azure-cli-task.yml
- name: azcli-slot-swap-ppe-etspe-dr
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - get: concourse
    passed:
    - smoke-test-ppe-dr

  - task: azcli-slot-swap-etspe-dr
    input_mapping:
      code-root: cicd
    vars:
      <<: *az-credentials-ppe
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp deployment slot swap -g ((az-cli.dr.rg-name)) -n ((az-cli.dr.ppe.etspe)) --slot dev --target-slot production
    file: concourse/azure-cli/azure-cli-task.yml
- name: azcli-slot-swap-ppe-etscn-dr
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - get: concourse
    passed:
    - smoke-test-ppe-dr

  - task: azcli-slot-swap-etscn-dr
    input_mapping:
      code-root: cicd
    vars:
      <<: *az-credentials-ppe
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp deployment slot swap -g ((az-cli.dr.rg-name)) -n ((az-cli.dr.ppe.etscn)) --slot dev --target-slot production
    file: concourse/azure-cli/azure-cli-task.yml
- name: azcli-slot-swap-ppe-etsrr-dr
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - get: concourse
    passed:
    - smoke-test-ppe-dr

  - task: azcli-slot-swap-etsrr-dr
    input_mapping:
      code-root: cicd
    vars:
      <<: *az-credentials-ppe
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp deployment slot swap -g ((az-cli.dr.rg-name)) -n ((az-cli.dr.ppe.etsrr)) --slot dev --target-slot production
    file: concourse/azure-cli/azure-cli-task.yml
- name: azcli-slot-swap-ppe-etsdrs-dr
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - get: concourse
    passed:
    - smoke-test-ppe-dr

  - task: azcli-slot-swap-etsdrs-dr
    input_mapping:
      code-root: cicd
    vars:
      <<: *az-credentials-ppe
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp deployment slot swap -g ((az-cli.dr.rg-name)) -n ((az-cli.dr.ppe.etsdrs)) --slot dev --target-slot production
    file: concourse/azure-cli/azure-cli-task.yml
- name: promote-to-prod
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: concourse
      passed:
      - azcli-slot-swap-ppe-etsae
      - azcli-slot-swap-ppe-etspe
      - azcli-slot-swap-ppe-etscn
      - azcli-slot-swap-ppe-etsdrs
      - azcli-slot-swap-ppe-etsrr

  - task: promote-build
    input_mapping:
      version: version
    vars:
      version: ((vault.ppe-version))
      secret_key : prod-version
      vault_addr: ((vault.vault-addr))
    params:
      VAULT_PATH: ((vault.vault-path-version))
    file: concourse/build/promote-build.yml
###---PROD---###
- name: terraform-plan-prod
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: cicd
    - get: concourse

  - task: run-terraform
    input_mapping:
      code-root: cicd
      version: version
    vars:
      <<: *az-credentials-prod
      <<: *terraform-params
      terraform-commands: |
        terraform init -reconfigure -backend-config=../../../environments/prod/((terraform.env_folder))/terraform.backendconfig
        terraform plan -var-file=../../../environments/prod/((terraform.env_folder))/terraform.tfvars \
          -var source_zip_file_name_etsae=((component.name.etsae))-((vault.prod-version)).zip \
          -var source_zip_file_name_etspe=((component.name.etspe))-((vault.prod-version)).zip \
          -var source_zip_file_name_etscn=((component.name.etscn))-((vault.prod-version)).zip \
          -var source_zip_file_name_etsrr=((component.name.etsrr))-((vault.prod-version)).zip \
          -var source_zip_file_name_etsdrs=((component.name.etsdrs))-((vault.prod-version)).zip \
          -var ZipArtifactVersion=((vault.prod-version)) \
          -var secret_name_snowflk_login='((azure:entitlements-prod.SnowflakeEntitlementServiceAccountLogin))' \
          -var secret_name_snowflk_pass='((azure:entitlements-prod.SnowflakeEntitlementServiceAccountPswd))' \
          -var secret_name_snowflk_replication_login='((azure:entitlements-prod.SnowflakeReplicationAccountLogin))' \
          -var secret_name_snowflk_replication_pass='((azure:entitlements-prod.SnowflakeReplicationAccountPswd))' \
          -var secret_name_snowflk_connstring='((azure:entitlements-prod.SF-ConnectionString-azure-east-us-2))' \
          -var secret_name_snowflk_connstringslot='((azure:entitlements-prod.SF-ConnectionString-Slot-azure-east-us-2))' \
          -var secret_name_snowflk_replicanodes='((azure:entitlements-prod.SnowflakeReplicaNodes))' \
          -var secret_name_compass_key='((azure:general-prod.cam-subscription-pk))' \
          -var secret_name_snowflk_connstring_aws='((azure:entitlements-prod.SF-ConnectionString-aws-eu-west-1))' \
          -var secret_name_snowflk_connstringslot_aws='((azure:entitlements-prod.SF-ConnectionString-Slot-aws-eu-west-1))' \
          -var secret_name_snowflk_connstring_dr='((azure:entitlements-prod.SF-ConnectionString-azure-central-us))' \
          -var secret_name_snowflk_connstringslot_dr='((azure:entitlements-prod.SF-ConnectionString-Slot-azure-central-us))' \
          -var secret_name_snowflk_connstring_2='((azure:entitlements-prod.SF-ConnectionString-azure-west-europe))' \
          -var secret_name_snowflk_connstringslot_2='((azure:entitlements-prod.SF-ConnectionString-Slot-azure-west-europe))' \
          -var secret_name_snowflk_connstring_aws_2='((azure:entitlements-prod.SF-ConnectionString-aws-us-east-1))' \
          -var secret_name_snowflk_connstringslot_aws_2='((azure:entitlements-prod.SF-ConnectionString-Slot-aws-us-east-1))' \
          -var QacFunctionAppId='((azure:entitlements-prod.QacFunctionAppId))' --out=plan.tfplan
    file: concourse/terraform/run-terraform-task.yaml
- name: terraform-plan-prod-dr
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: cicd
    - get: concourse

  - task: run-terraform
    input_mapping:
      code-root: cicd
      version: version
    vars:
      <<: *az-credentials-prod
      <<: *terraform-params
      terraform-commands: |
        terraform init -reconfigure -backend-config=../../../environments/dr-prod/((terraform.env_folder))/terraform.backendconfig
        terraform plan -var-file=../../../environments/dr-prod/((terraform.env_folder))/terraform.tfvars \
          -var source_zip_file_name_etsae=((component.name.etsae))-((vault.prod-version)).zip \
          -var source_zip_file_name_etspe=((component.name.etspe))-((vault.prod-version)).zip \
          -var source_zip_file_name_etscn=((component.name.etscn))-((vault.prod-version)).zip \
          -var source_zip_file_name_etsrr=((component.name.etsrr))-((vault.prod-version)).zip \
          -var source_zip_file_name_etsdrs=((component.name.etsdrs))-((vault.prod-version)).zip \
          -var ZipArtifactVersion=((vault.prod-version)) \
          -var secret_name_snowflk_login='((azure:entitlements-prod.SnowflakeEntitlementServiceAccountLogin))' \
          -var secret_name_snowflk_pass='((azure:entitlements-prod.SnowflakeEntitlementServiceAccountPswd))' \
          -var secret_name_snowflk_replication_login='((azure:entitlements-prod.SnowflakeReplicationAccountLogin))' \
          -var secret_name_snowflk_replication_pass='((azure:entitlements-prod.SnowflakeReplicationAccountPswd))' \
          -var secret_name_snowflk_connstring='((azure:entitlements-prod.SF-ConnectionString-azure-east-us-2))' \
          -var secret_name_snowflk_connstringslot='((azure:entitlements-prod.SF-ConnectionString-Slot-azure-east-us-2))' \
          -var secret_name_snowflk_replicanodes='((azure:entitlements-prod.SnowflakeReplicaNodes))' \
          -var secret_name_compass_key='((azure:general-prod.cam-subscription-pk))' \
          -var secret_name_snowflk_connstring_aws='((azure:entitlements-prod.SF-ConnectionString-aws-eu-west-1))' \
          -var secret_name_snowflk_connstringslot_aws='((azure:entitlements-prod.SF-ConnectionString-Slot-aws-eu-west-1))' \
          -var secret_name_snowflk_connstring_dr='((azure:entitlements-prod.SF-ConnectionString-azure-central-us))' \
          -var secret_name_snowflk_connstringslot_dr='((azure:entitlements-prod.SF-ConnectionString-Slot-azure-central-us))' \
          -var secret_name_snowflk_connstring_2='((azure:entitlements-prod.SF-ConnectionString-azure-west-europe))' \
          -var secret_name_snowflk_connstringslot_2='((azure:entitlements-prod.SF-ConnectionString-Slot-azure-west-europe))' \
          -var secret_name_snowflk_connstring_aws_2='((azure:entitlements-prod.SF-ConnectionString-aws-us-east-1))' \
          -var secret_name_snowflk_connstringslot_aws_2='((azure:entitlements-prod.SF-ConnectionString-Slot-aws-us-east-1))' \
          -var QacFunctionAppId='((azure:entitlements-prod.QacFunctionAppId))' --out=plan.tfplan
    file: concourse/terraform/run-terraform-task.yaml
- name: terraform-apply-prod
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: cicd
      passed:
      - terraform-plan-prod
    - get: concourse
      params:
        depth: 1
      passed:
      - terraform-plan-prod
  - task: run-terraform
    input_mapping:
      code-root: cicd
      version: version
    vars:
      <<: *az-credentials-prod
      <<: *terraform-params
      terraform-commands: |
        terraform init -reconfigure -backend-config=../../../environments/prod/((terraform.env_folder))/terraform.backendconfig
        terraform plan -var-file=../../../environments/prod/((terraform.env_folder))/terraform.tfvars \
          -var source_zip_file_name_etsae=((component.name.etsae))-((vault.prod-version)).zip \
          -var source_zip_file_name_etspe=((component.name.etspe))-((vault.prod-version)).zip \
          -var source_zip_file_name_etscn=((component.name.etscn))-((vault.prod-version)).zip \
          -var source_zip_file_name_etsrr=((component.name.etsrr))-((vault.prod-version)).zip \
          -var source_zip_file_name_etsdrs=((component.name.etsdrs))-((vault.prod-version)).zip \
          -var ZipArtifactVersion=((vault.prod-version)) \
          -var secret_name_snowflk_login='((azure:entitlements-prod.SnowflakeEntitlementServiceAccountLogin))' \
          -var secret_name_snowflk_pass='((azure:entitlements-prod.SnowflakeEntitlementServiceAccountPswd))' \
          -var secret_name_snowflk_replication_login='((azure:entitlements-prod.SnowflakeReplicationAccountLogin))' \
          -var secret_name_snowflk_replication_pass='((azure:entitlements-prod.SnowflakeReplicationAccountPswd))' \
          -var secret_name_snowflk_connstring='((azure:entitlements-prod.SF-ConnectionString-azure-east-us-2))' \
          -var secret_name_snowflk_connstringslot='((azure:entitlements-prod.SF-ConnectionString-Slot-azure-east-us-2))' \
          -var secret_name_snowflk_replicanodes='((azure:entitlements-prod.SnowflakeReplicaNodes))' \
          -var secret_name_compass_key='((azure:general-prod.cam-subscription-pk))' \
          -var secret_name_snowflk_connstring_aws='((azure:entitlements-prod.SF-ConnectionString-aws-eu-west-1))' \
          -var secret_name_snowflk_connstringslot_aws='((azure:entitlements-prod.SF-ConnectionString-Slot-aws-eu-west-1))' \
          -var secret_name_snowflk_connstring_dr='((azure:entitlements-prod.SF-ConnectionString-azure-central-us))' \
          -var secret_name_snowflk_connstringslot_dr='((azure:entitlements-prod.SF-ConnectionString-Slot-azure-central-us))' \
          -var secret_name_snowflk_connstring_2='((azure:entitlements-prod.SF-ConnectionString-azure-west-europe))' \
          -var secret_name_snowflk_connstringslot_2='((azure:entitlements-prod.SF-ConnectionString-Slot-azure-west-europe))' \
          -var secret_name_snowflk_connstring_aws_2='((azure:entitlements-prod.SF-ConnectionString-aws-us-east-1))' \
          -var secret_name_snowflk_connstringslot_aws_2='((azure:entitlements-prod.SF-ConnectionString-Slot-aws-us-east-1))' \
          -var QacFunctionAppId='((azure:entitlements-prod.QacFunctionAppId))' --out=plan.tfplan
        terraform apply  --parallelism=1 plan.tfplan
    file: concourse/terraform/run-terraform-task.yaml
- name: terraform-apply-prod-dr
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: cicd
      passed:
      - terraform-plan-prod-dr
    - get: concourse
      params:
        depth: 1
      passed:
      - terraform-plan-prod-dr
  - task: run-terraform
    input_mapping:
      code-root: cicd
      version: version
    vars:
      <<: *az-credentials-prod
      <<: *terraform-params
      terraform-commands: |
        terraform init -reconfigure -backend-config=../../../environments/dr-prod/((terraform.env_folder))/terraform.backendconfig
        terraform plan -var-file=../../../environments/dr-prod/((terraform.env_folder))/terraform.tfvars \
          -var source_zip_file_name_etsae=((component.name.etsae))-((vault.prod-version)).zip \
          -var source_zip_file_name_etspe=((component.name.etspe))-((vault.prod-version)).zip \
          -var source_zip_file_name_etscn=((component.name.etscn))-((vault.prod-version)).zip \
          -var source_zip_file_name_etsrr=((component.name.etsrr))-((vault.prod-version)).zip \
          -var source_zip_file_name_etsdrs=((component.name.etsdrs))-((vault.prod-version)).zip \
          -var ZipArtifactVersion=((vault.prod-version)) \
          -var secret_name_snowflk_login='((azure:entitlements-prod.SnowflakeEntitlementServiceAccountLogin))' \
          -var secret_name_snowflk_pass='((azure:entitlements-prod.SnowflakeEntitlementServiceAccountPswd))' \
          -var secret_name_snowflk_replication_login='((azure:entitlements-prod.SnowflakeReplicationAccountLogin))' \
          -var secret_name_snowflk_replication_pass='((azure:entitlements-prod.SnowflakeReplicationAccountPswd))' \
          -var secret_name_snowflk_connstring='((azure:entitlements-prod.SF-ConnectionString-azure-east-us-2))' \
          -var secret_name_snowflk_connstringslot='((azure:entitlements-prod.SF-ConnectionString-Slot-azure-east-us-2))' \
          -var secret_name_snowflk_replicanodes='((azure:entitlements-prod.SnowflakeReplicaNodes))' \
          -var secret_name_compass_key='((azure:general-prod.cam-subscription-pk))' \
          -var secret_name_snowflk_connstring_aws='((azure:entitlements-prod.SF-ConnectionString-aws-eu-west-1))' \
          -var secret_name_snowflk_connstringslot_aws='((azure:entitlements-prod.SF-ConnectionString-Slot-aws-eu-west-1))' \
          -var secret_name_snowflk_connstring_dr='((azure:entitlements-prod.SF-ConnectionString-azure-central-us))' \
          -var secret_name_snowflk_connstringslot_dr='((azure:entitlements-prod.SF-ConnectionString-Slot-azure-central-us))' \
          -var secret_name_snowflk_connstring_2='((azure:entitlements-prod.SF-ConnectionString-azure-west-europe))' \
          -var secret_name_snowflk_connstringslot_2='((azure:entitlements-prod.SF-ConnectionString-Slot-azure-west-europe))' \
          -var secret_name_snowflk_connstring_aws_2='((azure:entitlements-prod.SF-ConnectionString-aws-us-east-1))' \
          -var secret_name_snowflk_connstringslot_aws_2='((azure:entitlements-prod.SF-ConnectionString-Slot-aws-us-east-1))' \
          -var QacFunctionAppId='((azure:entitlements-prod.QacFunctionAppId))' --out=plan.tfplan
        terraform apply  --parallelism=1 plan.tfplan
    file: concourse/terraform/run-terraform-task.yaml
- name: deploy-sqlscripts-prod
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: function-app
    - get: cicd
      passed:
      - terraform-apply-prod
      trigger: true
    - get: concourse
  - in_parallel:
    - task: execute-python-prod
      input_mapping:
        function-app: function-app
        cicd: cicd
        version: version
      vars:
        snowflakeConnectionString: ((azure:entitlements-prod.SF-ConnectionString-azure-east-us-2))
        sqlScriptsFolderOrFilesList: "../../../function-app/SnowflakeScripts/Apply"
        snowflakeUser: ((azure:general-prod.SnowflakeServiceAccountLoginId))
        snowflakePassword: ((azure:general-prod.SnowflakeServiceAccountPswd))
        artifactVersion: ((vault.prod-version))
        exec_path: ((sql-scripts.exec_path))
        isSlot: "false"
      file: cicd/scripts/storproc-update/deploy/snowflakeproc.yml
    - task: execute-python-prod-slot
      input_mapping:
        function-app: function-app
        cicd: cicd
        version: version
      vars:
        snowflakeConnectionString: ((azure:entitlements-prod.SF-ConnectionString-Slot-azure-east-us-2))
        sqlScriptsFolderOrFilesList: "../../../function-app/SnowflakeScripts/Apply"
        snowflakeUser: ((azure:general-prod.SnowflakeServiceAccountLoginId))
        snowflakePassword: ((azure:general-prod.SnowflakeServiceAccountPswd))
        artifactVersion: ((vault.prod-version))
        exec_path: ((sql-scripts.exec_path))
        isSlot: "true"
      file: cicd/scripts/storproc-update/deploy/snowflakeproc.yml
  - task: refresh-function-etsrr
    input_mapping: 
      concourse: concouse
    vars:
      functionkey: ((azure:entitlements-prod.etsrr_key))
      functionURL: ((azure:entitlements-prod.etsrr_refresh_url))
      curl-commands: |
        curl -d --location --request POST "$functionURL" --header "x-functions-key:"$functionkey""
    file: concourse/curl/task.yml
  - task: azcli-restart-function-apps
    input_mapping:
      code-root: cicd
    vars:
      <<: *az-credentials-prod
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp restart --name ((az-cli.prod.etspe)) --slot dev --resource-group ((az-cli.rg-name))
        az functionapp restart --name ((az-cli.prod.etscn)) --slot dev --resource-group ((az-cli.rg-name))
        
    file: concourse/azure-cli/azure-cli-task.yml
- name: smoke-test-prod
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: cicd
      params:
        depth: 1
      passed:
      - deploy-sqlscripts-prod
    - get: concourse
    - get: function-app
  - task: smoke-test-prod
    input_mapping:
      code-root: function-app
    vars:
      <<: *az-credentials-prod
      <<: *bams-general
      Azure__Functions__AcceptEntitlementSecretName: ((smoke-test.general.Azure__Functions__AcceptEntitlementSecretName))
      Azure__Blobs__EntitlementStorageSecretName: ((smoke-test.general.Azure__Blobs__EntitlementStorageSecretName))
      Azure__Functions__RefreshReplicaSecretName: ((smoke-test.general.Azure_Functions_RefreshReplicaSecretName))
      Azure__KeyVaults__KeyVault: ((smoke-test.prod.Azure__KeyVaults__KeyVault))
      Azure__KeyVaults__SnowflakePasswordVault: ((smoke-test.prod.Azure__KeyVaults__SnowflakePasswordVault))
      Snowflake__Internal__User: ((azure:general-prod.SnowflakeServiceAccountLoginId))
      Snowflake__Internal__Password: ((azure:general-prod.SnowflakeServiceAccountPswd))
      Snowflake__Internal__Schema: ((smoke-test.general.Snowflake__Internal__Schema))
      Application__CustomerIdName: ((smoke-test.prod.Application__CustomerIdName))
      EnvironmentName: ((azure:general-prod.EnvironmentName))
      ScriptsVersion: ((vault.prod-version))
      TestRailConnectionString: ((azure:general-prod.TestRailConnectionString))
      SnowflakeInternal: ((azure:entitlements-prod.SF-ConnectionString-azure-east-us-2))
      SnowflakeExternal: ((azure:entitlements-prod.Snowflake_External_Primary_ConnectionString))
      CosmosDbName: dds-logging
      UseTestDb: true
      Application__Timeout: "00:10:00"
      Application__Interval: "00:00:05"
    file: concourse/smoke-tests/smoke-test.yml
- name: smoke-test-prod-dr
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: cicd
      params:
        depth: 1
    - get: concourse
      passed:
      - enable-function-apps-prod-dr
    - get: function-app
  - task: smoke-test-prod-dr
    input_mapping:
      code-root: function-app
    vars:
      <<: *az-credentials-prod
      <<: *bams-general
      Azure__Functions__AcceptEntitlementSecretName: ((smoke-test.general.Azure__Functions__AcceptEntitlementSecretName))
      Azure__Blobs__EntitlementStorageSecretName: ((smoke-test.general.Azure__Blobs__EntitlementStorageSecretName))
      Azure__KeyVaults__KeyVault: ((smoke-test.prod.dr.Azure__KeyVaults__KeyVault))
      Azure__KeyVaults__SnowflakePasswordVault: ((smoke-test.prod.dr.Azure__KeyVaults__SnowflakePasswordVault))
      Snowflake__Internal__User: ((azure:general-prod.SnowflakeServiceAccountLoginId))
      Snowflake__Internal__Password: ((azure:general-prod.SnowflakeServiceAccountPswd))
      Snowflake__Internal__Schema: ((smoke-test.general.Snowflake__Internal__Schema))
      Application__CustomerIdName: ((smoke-test.prod.dr.Application__CustomerIdName))
      EnvironmentName: ((azure:general-prod.EnvironmentName))
      ScriptsVersion: ((vault.prod-version))
      TestRailConnectionString: ((azure:general-prod.TestRailConnectionString))
      SnowflakeInternal: ((azure:entitlements-prod.SF-ConnectionString-azure-central-us))
      SnowflakeExternal: ((azure:entitlements-prod.Snowflake_External_DR_ConnectionString))
      CosmosDbName: dds-logging
      UseTestDb: true
      Application__Timeout: "00:10:00"
      Application__Interval: "00:00:05"
    file: concourse/smoke-tests/smoke-test.yml
- name: smoke-test-prod-replica
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: concourse
      passed:
      - smoke-test-prod
      trigger: true
    - get: function-app
  - task: smoke-test
    input_mapping:
      code-root: function-app
      version: version
    vars:
      <<: *az-credentials-prod
      <<: *bams-general
      Azure__Functions__AcceptEntitlementSecretName: ((smoke-test.general.Azure__Functions__AcceptEntitlementSecretName))
      Azure__Blobs__EntitlementStorageSecretName: ((smoke-test.general.Azure__Blobs__EntitlementStorageSecretName))
      Azure__Functions__RefreshReplicaSecretName: ((smoke-test.general.Azure_Functions_RefreshReplicaSecretName))
      Azure__KeyVaults__KeyVault: ((smoke-test.prod.Azure__KeyVaults__KeyVault))
      Azure__KeyVaults__SnowflakePasswordVault: ((smoke-test.prod.Azure__KeyVaults__SnowflakePasswordVault))
      Snowflake__Internal__User: ((azure:general-prod.SnowflakeServiceAccountLoginId))
      Snowflake__Internal__Password: ((azure:general-prod.SnowflakeServiceAccountPswd))
      Snowflake__Internal__Schema: ((smoke-test.general.Snowflake__Internal__Schema))
      Application__CustomerIdName: ((smoke-test.prod.Application__CustomerIdName))
      EnvironmentName: ((azure:general-prod.EnvironmentName))
      ScriptsVersion: ((vault.prod-version))
      TestRailConnectionString: ((azure:general-prod.TestRailConnectionString))
      SnowflakeInternal: ((azure:entitlements-prod.SF-ConnectionString-aws-us-east-1))
      SnowflakeExternal: ((azure:entitlements-prod.Snowflake_External_DR_ConnectionString))
      UseTestDb: false
      Application__Timeout: "00:10:00"
      Application__Interval: "00:00:05"
    file: concourse/smoke-tests/smoke-test-dr-dev.yml
- name: slot-settings-prod
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: concourse
      passed:
      - terraform-apply-prod
      trigger: true
  - task: azcli-slot-sticky-settings-prod
    input_mapping:
      code-root: cicd
    vars:
      <<: *az-credentials-prod
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp config appsettings set --name ((az-cli.prod.etsae)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "EntitlementsContainerName=((slot-settings.etscontainer))"
        az functionapp config appsettings set --name ((az-cli.prod.etspe)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "EntitlementsContainerName=((slot-settings.etscontainer))"

        az functionapp config appsettings set --name ((az-cli.prod.etsae)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "FailedEntitlementsContainerName=((slot-settings.failetscontainer))"
        az functionapp config appsettings set --name ((az-cli.prod.etspe)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "FailedEntitlementsContainerName=((slot-settings.failetscontainer))"

        az functionapp config appsettings set --name ((az-cli.prod.etsae)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "AppId=((slot-settings.appid.etsae))"
        az functionapp config appsettings set --name ((az-cli.prod.etspe)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "AppId=((slot-settings.appid.etspe))"
        az functionapp config appsettings set --name ((az-cli.prod.etscn)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "AppId=((slot-settings.appid.etscn))"
        az functionapp config appsettings set --name ((az-cli.prod.etsrr)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "AppId=((slot-settings.appid.etsrr))"
        az functionapp config appsettings set --name ((az-cli.prod.etsdrs)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "AppId=((slot-settings.appid.etsdrs))"

        az functionapp config appsettings set --name ((az-cli.prod.etsae)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "((slot-settings.hubname.setting))=((slot-settings.hubname.etsae))"
        az functionapp config appsettings set --name ((az-cli.prod.etspe)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "((slot-settings.hubname.setting))=((slot-settings.hubname.etspe))"
        az functionapp config appsettings set --name ((az-cli.prod.etsrr)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "((slot-settings.hubname.setting))=((slot-settings.hubname.etsrr))"
        az functionapp config appsettings set --name ((az-cli.prod.etsdrs)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "((slot-settings.hubname.setting))=((slot-settings.hubname.etsdrs))"
        az functionapp config appsettings set --name ((az-cli.prod.etscn)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "((slot-settings.hubname.setting))=((slot-settings.hubname.etscn))"

        az functionapp config appsettings set --name ((az-cli.prod.etsae)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "CosmosDBName=((slot-settings.cosmos.dbname))"
        az functionapp config appsettings set --name ((az-cli.prod.etspe)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "CosmosDBName=((slot-settings.cosmos.dbname))"
        az functionapp config appsettings set --name ((az-cli.prod.etscn)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "CosmosDBName=((slot-settings.cosmos.dbname))"
        az functionapp config appsettings set --name ((az-cli.prod.etsrr)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "CosmosDBName=((slot-settings.cosmos.dbname))"
        az functionapp config appsettings set --name ((az-cli.prod.etsdrs)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "CosmosDBName=((slot-settings.cosmos.dbname))"
        
        az functionapp config appsettings set --name ((az-cli.prod.etspe)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "((slot-settings.snowflake.setting))=((slot-settings.snowflake.string))"

        az functionapp config appsettings set --name ((az-cli.prod.etsae)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "EntitlementsQueue=((slot-settings.entitlementsqueue))"
        az functionapp config appsettings set --name ((az-cli.prod.etspe)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "EntitlementsQueue=((slot-settings.entitlementsqueue))"
        az functionapp config appsettings set --name ((az-cli.prod.etsdrs)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "EntitlementsQueue=((slot-settings.entitlementsqueue))"

        az functionapp config appsettings set --name ((az-cli.prod.etscn)) --resource-group ((az-cli.rg-name)) --slot dev --slot-settings "IsSlotEnvironment=((slot-settings.isslotenv))"

    file: concourse/azure-cli/azure-cli-task.yml
- name: slot-settings-prod-dr
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: concourse
      passed:
      - terraform-apply-prod-dr
      trigger: true
  - task: azcli-slot-sticky-settings-prod-dr
    input_mapping:
      code-root: cicd
    vars:
      <<: *az-credentials-prod
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp config appsettings set --name ((az-cli.dr.prod.etsae)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "EntitlementsContainerName=((slot-settings.etscontainer))"
        az functionapp config appsettings set --name ((az-cli.dr.prod.etspe)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "EntitlementsContainerName=((slot-settings.etscontainer))"

        az functionapp config appsettings set --name ((az-cli.dr.prod.etsae)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "FailedEntitlementsContainerName=((slot-settings.failetscontainer))"
        az functionapp config appsettings set --name ((az-cli.dr.prod.etspe)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "FailedEntitlementsContainerName=((slot-settings.failetscontainer))"

        az functionapp config appsettings set --name ((az-cli.dr.prod.etsae)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "AppId=((slot-settings.appid.etsae))"
        az functionapp config appsettings set --name ((az-cli.dr.prod.etspe)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "AppId=((slot-settings.appid.etspe))"
        az functionapp config appsettings set --name ((az-cli.dr.prod.etscn)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "AppId=((slot-settings.appid.etscn))"
        az functionapp config appsettings set --name ((az-cli.dr.prod.etsrr)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "AppId=((slot-settings.appid.etsrr))"
        az functionapp config appsettings set --name ((az-cli.dr.prod.etsdrs)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "AppId=((slot-settings.appid.etsdrs))"

        az functionapp config appsettings set --name ((az-cli.dr.prod.etsae)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "((slot-settings.hubname.setting))=((slot-settings.hubname.etsae))"
        az functionapp config appsettings set --name ((az-cli.dr.prod.etspe)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "((slot-settings.hubname.setting))=((slot-settings.hubname.etspe))"
        az functionapp config appsettings set --name ((az-cli.dr.prod.etsrr)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "((slot-settings.hubname.setting))=((slot-settings.hubname.etsrr))"
        az functionapp config appsettings set --name ((az-cli.dr.prod.etsdrs)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "((slot-settings.hubname.setting))=((slot-settings.hubname.etsdrs))"
        az functionapp config appsettings set --name ((az-cli.dr.prod.etscn)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "((slot-settings.hubname.setting))=((slot-settings.hubname.etscn))"

        az functionapp config appsettings set --name ((az-cli.dr.prod.etsae)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "CosmosDBName=((slot-settings.cosmos.dbname))"
        az functionapp config appsettings set --name ((az-cli.dr.prod.etspe)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "CosmosDBName=((slot-settings.cosmos.dbname))"
        az functionapp config appsettings set --name ((az-cli.dr.prod.etscn)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "CosmosDBName=((slot-settings.cosmos.dbname))"
        az functionapp config appsettings set --name ((az-cli.dr.prod.etsrr)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "CosmosDBName=((slot-settings.cosmos.dbname))"
        az functionapp config appsettings set --name ((az-cli.dr.prod.etsdrs)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "CosmosDBName=((slot-settings.cosmos.dbname))"
        
        az functionapp config appsettings set --name ((az-cli.dr.prod.etspe)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "((slot-settings.snowflake.setting))=((slot-settings.snowflake.string))"

        az functionapp config appsettings set --name ((az-cli.dr.prod.etsae)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "EntitlementsQueue=((slot-settings.entitlementsqueue))"
        az functionapp config appsettings set --name ((az-cli.dr.prod.etspe)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "EntitlementsQueue=((slot-settings.entitlementsqueue))"
        az functionapp config appsettings set --name ((az-cli.dr.prod.etsdrs)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "EntitlementsQueue=((slot-settings.entitlementsqueue))"

        az functionapp config appsettings set --name ((az-cli.dr.prod.etscn)) --resource-group ((az-cli.dr.rg-name)) --slot dev --slot-settings "IsSlotEnvironment=((slot-settings.isslotenv))"

    file: concourse/azure-cli/azure-cli-task.yml
- name: enable-function-apps-prod-dr
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: concourse
      passed:
      - terraform-apply-prod-dr
      trigger: true
  - task: azcli-enable-function-apps
    input_mapping:
      code-root: cicd
    vars:
      <<: *az-credentials-prod
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp start --name ((az-cli.dr.prod.etsae)) --resource-group ((az-cli.dr.rg-name))
        az functionapp start --name ((az-cli.dr.prod.etspe)) --resource-group ((az-cli.dr.rg-name))
        az functionapp start --name ((az-cli.dr.prod.etscn)) --resource-group ((az-cli.dr.rg-name))
        az functionapp start --name ((az-cli.dr.prod.etsdrs)) --resource-group ((az-cli.dr.rg-name))
        az functionapp start --name ((az-cli.dr.prod.etsrr)) --resource-group ((az-cli.dr.rg-name))
        az functionapp start --name ((az-cli.dr.prod.etsae)) --slot dev --resource-group ((az-cli.dr.rg-name))
        az functionapp start --name ((az-cli.dr.prod.etspe)) --slot dev --resource-group ((az-cli.dr.rg-name))
        az functionapp start --name ((az-cli.dr.prod.etscn)) --slot dev --resource-group ((az-cli.dr.rg-name))
        az functionapp start --name ((az-cli.dr.prod.etsdrs)) --slot dev --resource-group ((az-cli.dr.rg-name))
        az functionapp start --name ((az-cli.dr.prod.etsrr)) --slot dev --resource-group ((az-cli.dr.rg-name))
        
    file: concourse/azure-cli/azure-cli-task.yml
- name: disable-function-apps-prod-dr
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: concourse
      passed:
      - azcli-slot-swap-prod-etsae-dr
      - azcli-slot-swap-prod-etspe-dr
      - azcli-slot-swap-prod-etscn-dr
      - azcli-slot-swap-prod-etsdrs-dr
      - azcli-slot-swap-prod-etsrr-dr
      trigger: true
  - task: azcli-disable-function-apps
    input_mapping:
      code-root: cicd
    vars:
      <<: *az-credentials-prod
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp stop --name ((az-cli.dr.prod.etsae)) --resource-group ((az-cli.dr.rg-name))
        az functionapp stop --name ((az-cli.dr.prod.etspe)) --resource-group ((az-cli.dr.rg-name))
        az functionapp stop --name ((az-cli.dr.prod.etscn)) --resource-group ((az-cli.dr.rg-name))
        az functionapp stop --name ((az-cli.dr.prod.etsdrs)) --resource-group ((az-cli.dr.rg-name))
        az functionapp stop --name ((az-cli.dr.prod.etsrr)) --resource-group ((az-cli.dr.rg-name))
        az functionapp stop --name ((az-cli.dr.prod.etsae)) --slot dev --resource-group ((az-cli.dr.rg-name))
        az functionapp stop --name ((az-cli.dr.prod.etspe)) --slot dev --resource-group ((az-cli.dr.rg-name))
        az functionapp stop --name ((az-cli.dr.prod.etscn)) --slot dev --resource-group ((az-cli.dr.rg-name))
        az functionapp stop --name ((az-cli.dr.prod.etsdrs)) --slot dev --resource-group ((az-cli.dr.rg-name))
        az functionapp stop --name ((az-cli.dr.prod.etsrr)) --slot dev --resource-group ((az-cli.dr.rg-name))
        
    file: concourse/azure-cli/azure-cli-task.yml
- name: azcli-slot-swap-prod-etsae
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - get: concourse
    passed:
    - smoke-test-prod-replica
  - task: azcli-slot-swap-etsae
    input_mapping:
      code-root: cicd
    vars:
      <<: *az-credentials-prod
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp deployment slot swap -g ((az-cli.rg-name)) -n ((az-cli.prod.etsae)) --slot dev --target-slot production
    file: concourse/azure-cli/azure-cli-task.yml
- name: azcli-slot-swap-prod-etspe
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - get: concourse
    passed:
    - smoke-test-prod-replica

  - task: azcli-slot-swap-etspe
    input_mapping:
      code-root: cicd
    vars:
      <<: *az-credentials-prod
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp deployment slot swap -g ((az-cli.rg-name)) -n ((az-cli.prod.etspe)) --slot dev --target-slot production
    file: concourse/azure-cli/azure-cli-task.yml
- name: azcli-slot-swap-prod-etscn
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - get: concourse
    passed:
    - smoke-test-prod-replica

  - task: azcli-slot-swap-etscn
    input_mapping:
      code-root: cicd
    vars:
      <<: *az-credentials-prod
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp deployment slot swap -g ((az-cli.rg-name)) -n ((az-cli.prod.etscn)) --slot dev --target-slot production
    file: concourse/azure-cli/azure-cli-task.yml
- name: azcli-slot-swap-prod-etsrr
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - get: concourse
    passed:
    - smoke-test-prod-replica

  - task: azcli-slot-swap-etsrr
    input_mapping:
      code-root: cicd
    vars:
      <<: *az-credentials-prod
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp deployment slot swap -g ((az-cli.rg-name)) -n ((az-cli.prod.etsrr)) --slot dev --target-slot production
    file: concourse/azure-cli/azure-cli-task.yml
- name: azcli-slot-swap-prod-etsdrs
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - get: concourse
    passed:
    - smoke-test-prod-replica

  - task: azcli-slot-swap-etsdrs
    input_mapping:
      code-root: cicd
    vars:
      <<: *az-credentials-prod
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp deployment slot swap -g ((az-cli.rg-name)) -n ((az-cli.prod.etsdrs)) --slot dev --target-slot production
    file: concourse/azure-cli/azure-cli-task.yml
- name: azcli-slot-swap-prod-etsae-dr
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - get: concourse
    passed:
    - smoke-test-prod-dr
  - task: azcli-slot-swap-etsae-dr
    input_mapping:
      code-root: cicd
    vars:
      <<: *az-credentials-prod
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp deployment slot swap -g ((az-cli.dr.rg-name)) -n ((az-cli.dr.prod.etsae)) --slot dev --target-slot production
    file: concourse/azure-cli/azure-cli-task.yml
- name: azcli-slot-swap-prod-etspe-dr
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - get: concourse
    passed:
    - smoke-test-prod-dr

  - task: azcli-slot-swap-etspe-dr
    input_mapping:
      code-root: cicd
    vars:
      <<: *az-credentials-prod
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp deployment slot swap -g ((az-cli.dr.rg-name)) -n ((az-cli.dr.prod.etspe)) --slot dev --target-slot production
    file: concourse/azure-cli/azure-cli-task.yml
- name: azcli-slot-swap-prod-etscn-dr
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - get: concourse
    passed:
    - smoke-test-prod-dr

  - task: azcli-slot-swap-etscn-dr
    input_mapping:
      code-root: cicd
    vars:
      <<: *az-credentials-prod
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp deployment slot swap -g ((az-cli.dr.rg-name)) -n ((az-cli.dr.prod.etscn)) --slot dev --target-slot production
    file: concourse/azure-cli/azure-cli-task.yml
- name: azcli-slot-swap-prod-etsrr-dr
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - get: concourse
    passed:
    - smoke-test-prod-dr

  - task: azcli-slot-swap-etsrr-dr
    input_mapping:
      code-root: cicd
    vars:
      <<: *az-credentials-prod
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp deployment slot swap -g ((az-cli.dr.rg-name)) -n ((az-cli.dr.prod.etsrr)) --slot dev --target-slot production
    file: concourse/azure-cli/azure-cli-task.yml
- name: azcli-slot-swap-prod-etsdrs-dr
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - get: concourse
    passed:
    - smoke-test-prod-dr

  - task: azcli-slot-swap-etsdrs-dr
    input_mapping:
      code-root: cicd
    vars:
      <<: *az-credentials-prod
      az-commands: |
        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
        az functionapp deployment slot swap -g ((az-cli.dr.rg-name)) -n ((az-cli.dr.prod.etsdrs)) --slot dev --target-slot production
    file: concourse/azure-cli/azure-cli-task.yml
###---TERRAFORM-DESTROY---###
- name: terraform-destroy-dev
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: cicd
    - get: concourse
      params:
        depth: 1
    - get: version
  - task: run-terraform
    input_mapping:
      code-root: cicd
      version: version
    vars:
      <<: *az-credentials-dev
      <<: *terraform-params
      terraform-commands: |
        terraform init -reconfigure -backend-config=../../../environments/dev/((terraform.env_folder))/terraform.backendconfig
        terraform destroy -var-file=../../../environments/dev/((terraform.env_folder))/terraform.tfvars  -auto-approve
    file: concourse/terraform/run-terraform-task.yaml
- name: terraform-destroy-qa
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: cicd
    - get: concourse
      params:
        depth: 1
    - get: version
  - task: run-terraform
    input_mapping:
      code-root: cicd
      version: version
    vars:
      <<: *az-credentials-qa
      <<: *terraform-params
      terraform-commands: |
        terraform init -reconfigure -backend-config=../../../environments/qa/((terraform.env_folder))/terraform.backendconfig
        terraform destroy -var-file=../../../environments/qa/((terraform.env_folder))/terraform.tfvars -var QacFunctionAppId='((azure:entitlements-qa.QacFunctionAppId))' -auto-approve
    file: concourse/terraform/run-terraform-task.yaml
- name: terraform-destroy-ppe
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: cicd
    - get: concourse
      params:
        depth: 1
    - get: version
  - task: run-terraform
    input_mapping:
      code-root: cicd
      version: version
    vars:
      <<: *az-credentials-ppe
      <<: *terraform-params
      terraform-commands: |
        terraform init -reconfigure -backend-config=../../../environments/ppe/((terraform.env_folder))/terraform.backendconfig
        terraform destroy -var-file=../../../environments/ppe/((terraform.env_folder))/terraform.tfvars -var QacFunctionAppId='((azure:entitlements-ppe.QacFunctionAppId))' -auto-approve
    file: concourse/terraform/run-terraform-task.yaml
- name: terraform-destroy-ppe-dr
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: cicd
    - get: concourse
      params:
        depth: 1
    - get: version
  - task: run-terraform
    input_mapping:
      code-root: cicd
      version: version
    vars:
      <<: *az-credentials-ppe
      <<: *terraform-params
      terraform-commands: |
        terraform init -reconfigure -backend-config=../../../environments/dr-ppe/((terraform.env_folder))/terraform.backendconfig
        terraform destroy -var-file=../../../environments/ppe-dr/((terraform.env_folder))/terraform.tfvars -var QacFunctionAppId='((azure:entitlements-ppe.QacFunctionAppId))' -auto-approve
    file: concourse/terraform/run-terraform-task.yaml
- name: terraform-destroy-prod
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: cicd
    - get: concourse
      params:
        depth: 1
    - get: version
  - task: run-terraform
    input_mapping:
      code-root: cicd
      version: version
    vars:
      <<: *az-credentials-prod
      <<: *terraform-params
      terraform-commands: |
        terraform init -reconfigure -backend-config=../../../environments/prod/((terraform.env_folder))/terraform.backendconfig
        terraform destroy -var-file=../../../environments/prod/((terraform.env_folder))/terraform.tfvars -var QacFunctionAppId='((azure:entitlements-prod.QacFunctionAppId))' -auto-approve
    file: concourse/terraform/run-terraform-task.yaml
- name: terraform-destroy-prod-dr
  serial: true
  <<: *teams-success
  <<: *teams-failure
  plan:
  - in_parallel:
    - get: cicd
    - get: concourse
      params:
        depth: 1
    - get: version
  - task: run-terraform
    input_mapping:
      code-root: cicd
      version: version
    vars:
      <<: *az-credentials-prod
      <<: *terraform-params
      terraform-commands: |
        terraform init -reconfigure -backend-config=../../../environments/dr-prod/((terraform.env_folder))/terraform.backendconfig
        terraform destroy -var-file=../../../environments/dr-prod/((terraform.env_folder))/terraform.tfvars -var QacFunctionAppId='((azure:entitlements-prod.QacFunctionAppId))' -auto-approve
    file: concourse/terraform/run-terraform-task.yaml
###---BUMP-VERSION---###
- name: increase-major
  serial: true
  plan:
  - put: version
    params: { bump: major }
- name: increase-minor
  serial: true
  plan:
  - put: version
    params: { bump: minor }

###---Groups---###
groups:

  - name: dev-build
    jobs: 
    - dev-sonar-tests
    - dev-build-publish-etsae
    - dev-build-publish-etspe
    - dev-build-publish-etscn
    - dev-build-publish-etsrr
    - dev-build-publish-etsdrs
  - name: dev
    jobs:
    - terraform-deploy-dev
    - deploy-sqlscripts-dev
    - slot-settings-dev
    - smoke-test-dev
    - smoke-test-dev-replica
    - azcli-slot-swap-dev-etsae
    - azcli-slot-swap-dev-etspe
    - azcli-slot-swap-dev-etscn
    - azcli-slot-swap-dev-etsdrs
    - azcli-slot-swap-dev-etsrr
  - name: master-build
    jobs: 
    - master-sonar-tests
    - master-build-publish-etsae
    - master-build-publish-etspe
    - master-build-publish-etscn
    - master-build-publish-etsrr
    - master-build-publish-etsdrs
  - name: qa
    jobs:
    - terraform-plan-qa
    - terraform-apply-qa
    - deploy-sqlscripts-qa
    - slot-settings-qa
    - azcli-slot-swap-qa-etsae
    - azcli-slot-swap-qa-etspe
    - azcli-slot-swap-qa-etscn
    - azcli-slot-swap-qa-etsdrs
    - azcli-slot-swap-qa-etsrr
    - smoke-test-qa
    - smoke-test-qa-replica
    - promote-to-ppe
  - name: ppe
    jobs:
    - terraform-plan-ppe
    - terraform-apply-ppe
    - slot-settings-ppe
    - azcli-slot-swap-ppe-etsae
    - azcli-slot-swap-ppe-etspe
    - azcli-slot-swap-ppe-etscn
    - azcli-slot-swap-ppe-etsdrs
    - azcli-slot-swap-ppe-etsrr
    - smoke-test-ppe
    - smoke-test-ppe-replica
    - promote-to-prod
    - deploy-sqlscripts-ppe
    - terraform-plan-ppe-dr
    - terraform-apply-ppe-dr
    - slot-settings-ppe-dr
    - enable-function-apps-ppe-dr
    - azcli-slot-swap-ppe-etsae-dr
    - azcli-slot-swap-ppe-etspe-dr
    - azcli-slot-swap-ppe-etscn-dr
    - azcli-slot-swap-ppe-etsdrs-dr
    - azcli-slot-swap-ppe-etsrr-dr
    - disable-function-apps-ppe-dr
    - smoke-test-ppe-dr
  - name: prod
    jobs:
    - terraform-plan-prod
    - terraform-apply-prod
    - slot-settings-prod
    - azcli-slot-swap-prod-etsae
    - azcli-slot-swap-prod-etspe
    - azcli-slot-swap-prod-etscn
    - azcli-slot-swap-prod-etsdrs
    - azcli-slot-swap-prod-etsrr
    - smoke-test-prod
    - smoke-test-prod-replica
    - deploy-sqlscripts-prod
    - terraform-plan-prod-dr
    - terraform-apply-prod-dr
    - slot-settings-prod-dr
    - enable-function-apps-prod-dr
    - azcli-slot-swap-prod-etsae-dr
    - azcli-slot-swap-prod-etspe-dr
    - azcli-slot-swap-prod-etscn-dr
    - azcli-slot-swap-prod-etsdrs-dr
    - azcli-slot-swap-prod-etsrr-dr
    - disable-function-apps-prod-dr
    - smoke-test-prod-dr
  - name: destroy
    jobs:
    - terraform-destroy-dev
    - terraform-destroy-qa
    - terraform-destroy-ppe
    - terraform-destroy-ppe-dr
    - terraform-destroy-prod
    - terraform-destroy-prod-dr
  - name: bump-versions
    jobs:
    - increase-major
    - increase-minor
